// Generated by CoffeeScript 1.6.3
(function() {
  $(document).ready(function() {
    var sectionController;
    window.sectionIndex = 0;
    window.models.DataType = Backbone.Model.extend({
      url: function() {
        return "/class/";
      }
    });
    window.models.ElementWrapSaver = Backbone.Model.extend({
      url: "/section",
      toJSON: function() {
        return this.attributes.model.toJSON();
      }
    });
    window.models.Interface = Backbone.Model.extend();
    window.models.Property = Backbone.Model.extend({});
    /* COLLECTIONS*/

    window.collections.AllSections = Backbone.Collection.extend({
      model: models.Interface
    });
    window.allSections = new collections.AllSections();
    window.collections.Properties = Backbone.Collection.extend({
      model: models.Property
    });
    window.collections.ClassList = Backbone.Collection.extend({
      url: "/class",
      model: models.DataType,
      initialize: function(options) {
        var that;
        this.controller = options.controller;
        that = this;
        this.fetch({
          success: function() {
            var dataview, selectedData;
            dataview = new views.DataView({
              collection: that
            });
            return selectedData = new views.SelectedDataList({
              collection: that.controller.get("properties")
            });
          },
          failure: function() {
            return alert("could not get data from URL " + that.url);
          }
        });
        return this;
      }
    });
    window.views.SectionController = Backbone.View.extend({
      el: '.control-section',
      wrap: '.section-builder-wrap',
      template: $("#controller-wrap").html(),
      initialize: function() {
        this.render();
        this.index = allSections.length;
        this.collection = new collections.Elements();
        this.builder = new views.SectionBuilder({
          collection: this.collection,
          index: this.index
        });
        this.organizer = new views.ElementOrganizer({
          collection: this.collection,
          index: this.index,
          builder: this.builder
        });
        this.properties = new collections.Properties({
          index: this.index
        });
        this["interface"] = new models.Interface({
          currentSection: this.collection,
          builder: this.builder,
          organizer: this.organizer,
          properties: this.properties
        });
        allSections.add(this["interface"]);
        return this.classes = new collections.ClassList({
          controller: this["interface"]
        });
      },
      render: function() {
        this.$el.html(_.template(this.template, {}));
        return this;
      },
      events: {
        'click .generate-section': 'generateSection',
        'click .save-section': 'saveSection',
        'click .view-layouts': function() {
          return window.layoutCollection = new collections.Layouts();
        },
        'click .view-sections': function(e) {
          $(e.currentTarget).toggleClass("active");
          return $("#existing-sections").animate({
            height: 'toggle'
          }, 200);
        },
        'click .configure-interface': function() {
          return this.builder.$el.toggleClass("no-grid");
        }
      },
      generateSection: function(e) {
        var $t;
        if (e != null) {
          $t = $(e.currentTarget);
          $t.toggleClass("viewing-layout");
          if ($t.hasClass("viewing-layout")) {
            $t.text("View Configuration");
            this.organizer.render();
            this.builder.render();
          } else {
            $t.text("View Section Builder");
          }
        }
        return $(this.wrap).slideToggle('fast');
      },
      saveSection: function() {
        var el, title;
        title = $("#section-title").val();
        if (title === "") {
          alert("You need to enter a title");
          return;
        }
        _.each(this.collection.models, function(model) {
          model.set("section_name", title);
          return model.unset("inFlow", {
            silent: true
          });
        });
        el = new models.ElementWrapSaver({
          model: this.collection
        });
        return el.save(null, {
          success: function() {
            $("<div />").addClass("modal center").html("You saved the section").appendTo(document.body);
            $(document.body).addClass("active-modal");
            return $(".modal").delay(2000).fadeOut("fast", function() {
              $(this).remove();
              return $(document.body).removeClass("active-modal");
            });
          }
        });
      }
    });
    window.views.DataView = Backbone.View.extend({
      el: '#class-list',
      initialize: function() {
        _.bindAll(this, 'render');
        return this.render();
      },
      render: function() {
        var that;
        that = this;
        return _.each(this.collection.models, function(prop) {
          if (!prop.rendered) {
            prop.rendered = true;
            return $(that.el).append(new views.DataSingle({
              model: prop
            }).render().el);
          }
        });
      },
      events: {
        "click .new-data-type": function() {
          var mod;
          mod = new DataType({
            name: 'Private',
            properties: []
          });
          this.collection.add(mod);
          return this.ender();
        }
      }
    });
    window.views.DataSingle = Backbone.View.extend({
      template: $("#data-type").html(),
      updateTemplate: $("#add-property").html(),
      tagName: 'li',
      initialize: function() {
        return _.bindAll(this, 'render');
      },
      render: function() {
        var $el, i, newProperty, prop, props, _i, _len;
        $el = $(this.el);
        $el.prepend(_.template(this.template, this.model.toJSON()));
        props = this.model.get("properties");
        for (i = _i = 0, _len = props.length; _i < _len; i = ++_i) {
          prop = props[i];
          newProperty = new models.Property(prop);
          $el.append(new views.PropertyItem({
            model: newProperty
          }).render().el);
        }
        return this;
      },
      events: {
        "click .add-property": function(e) {
          var newProp;
          newProp = new models.Property({
            name: 'Change Me'
          });
          $(this.el).append(new views.PropertyItem({
            model: newProp
          }).render().el);
          return allSections.at(sectionIndex).get("properties").add(newProp);
        },
        "click .close": function(e) {
          var that;
          that = this;
          return $(e.currentTarget).closest("li").fadeOut("fast", function() {
            $(this).remove();
            return that.model.destroy();
          });
        },
        "click .hide-properties": function(e) {
          var $t;
          $t = $(e.currentTarget);
          $t.children(".icon").toggleClass("flipped");
          return $t.siblings("li").fadeToggle("fast");
        }
      }
    });
    window.views.SelectedDataList = Backbone.View.extend({
      el: '.property-editor',
      template: $("#configure-property").html(),
      initialize: function() {
        this.listenTo(this.collection, "add", this.render);
        _.bindAll(this, 'render');
        return this.render();
      },
      render: function() {
        var $el;
        $el = $(this.el);
        $el.empty();
        return _.each(this.collection.models, function(prop) {
          $el.append(new views.PropertyItemEditor({
            model: prop
          }).render().el);
          return this;
        });
      }
    });
    window.views.PropertyItemEditor = Backbone.View.extend({
      template: $("#property-item-editor").html(),
      tagName: 'li',
      render: function() {
        $(this.el).append(_.template(this.template, this.model.toJSON()));
        return this;
      }
    });
    window.views.PropertyItem = Backbone.View.extend({
      template: $("#property-item").html(),
      tagName: function() {
        var id, selected;
        selected = this.model.selected === true ? "selected" : "";
        id = this.options.sortable === true ? allSections.at(sectionIndex).get("properties").indexOf(this.model) : "";
        return 'li class="property ' + selected + '" data-prop-id="' + id + '"';
      },
      render: function() {
        this.$el.append(_.template(this.template, this.model.toJSON()));
        if (Math.random() > .6) {
          this.selected = true;
          this.$el.trigger("click");
        }
        return this;
      },
      events: {
        "click": function(e) {
          var $t, currentSection, model, selected;
          $t = $(e.currentTarget);
          $t.toggleClass("selected");
          selected = this.model.selected;
          currentSection = allSections.at(sectionIndex).get("currentSection");
          this.model.selected = selected ? false : true;
          if (this.model.selected === true) {
            allSections.at(sectionIndex).get("properties").add(this.model);
            model = this.model.toJSON();
            model.title = model.name;
            model.linkage = model;
            if (this.elementModel == null) {
              this.elementModel = new models.Element(model);
            }
            return currentSection.add(this.elementModel, {
              silent: true
            });
          } else {
            allSections.at(sectionIndex).get("properties").remove(this.model);
            currentSection.remove(this.elementModel);
            if (typeof builder !== "undefined" && builder !== null) {
              return builder.render();
            }
          }
        },
        "keyup": function(e) {
          var $t, val;
          $t = $(e.currentTarget);
          val = $t.find("div").text();
          return this.model.set("name", val);
        }
      }
    });
    return sectionController = new views.SectionController();
  });

}).call(this);
