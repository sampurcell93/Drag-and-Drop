// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var history;
    history = window.views.history = {};
    window.models.Snap = Backbone.Model.extend();
    window.collections.Snapshots = Backbone.Collection.extend({
      model: window.models.Snap
    });
    history.Snapshot = Backbone.View.extend({
      tagName: 'li',
      template: $("#snapshot").html(),
      initialize: function() {
        return this.controller = this.options.controller;
      },
      events: {
        "click": function() {
          var snapshot;
          snapshot = this.model.get("snapshot");
          this.controller.model.set("currentSection", snapshot);
          this.controller.organizer.collection = snapshot;
          this.controller.organizer.render();
          this.controller.builder.collection = snapshot;
          console.log(this.controller.builder.scaffold);
          this.controller.builder.scaffold.set("child_els", snapshot);
          return this.controller.builder.scaffold.trigger("render");
        }
      },
      render: function() {
        this.$el.html(_.template(this.template, this.model.toJSON()));
        return this;
      }
    });
    return history.HistoryList = Backbone.View.extend({
      el: '.history ul',
      initialize: function() {
        var self;
        this.controller = this.options.controller;
        this.snapshots = this.options.snapshots;
        self = this;
        return this.listenTo(this.collection, {
          "all": function(operation, subject, collection) {
            var clone, wrapper;
            clone = self.copyCollection(self.collection);
            wrapper = new models.Snap({
              snapshot: clone
            });
            wrapper.set({
              "opname": operation,
              "title": subject.get("title"),
              "type": subject.get("type")
            });
            self.snapshots.add(wrapper);
            return self.append(wrapper);
          }
        });
      },
      copyCollection: function(collection) {
        var copy;
        console.log(collection.toJSON());
        return copy = new collections.Elements(collection.toJSON());
      },
      render: function() {
        var self;
        console.log("Rdnerind ugsadvshj");
        self = this;
        this.$el.empty();
        return _.each(this.snapshots.models, function(snapshot) {
          return self.append(snapshot);
        });
      },
      append: function(snapshot) {
        var $el, SnapItem;
        $el = this.$el;
        SnapItem = new history.Snapshot({
          model: snapshot,
          controller: this.controller
        });
        return $el.append(SnapItem.render().el);
      }
    });
  });

}).call(this);
