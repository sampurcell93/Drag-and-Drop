// Generated by CoffeeScript 1.6.3
(function() {
  $(document).ready(function() {
    var ClassList, DataSingle, DataType, DataView, Property, PropertyItem, PropertyItemEditor, SelectedDataList, classes, dataview, selectedData;
    DataType = Backbone.Model.extend({
      url: function() {
        var c;
        return c = "/class/";
      },
      initialize: function() {
        return this.set("selected", []);
      }
    });
    dataview = null;
    selectedData = null;
    DataView = Backbone.View.extend({
      el: '#class-list',
      initialize: function() {
        _.bindAll(this, 'render');
        console.log(this.collection);
        return this.render();
      },
      render: function() {
        var that;
        that = this;
        return _.each(this.collection.models, function(prop) {
          if (!prop.rendered) {
            prop.rendered = true;
            return $(that.el).append(new DataSingle({
              model: prop
            }).render().el);
          }
        });
      },
      events: {
        "click .new-data-type": function() {
          var mod;
          mod = new DataType({
            name: 'Private',
            properties: []
          });
          this.collection.add(mod);
          return this.render();
        }
      }
    });
    SelectedDataList = Backbone.View.extend({
      el: '.property-editor',
      template: $("#configure-property").html(),
      initialize: function() {
        _.bindAll(this, 'render');
        return this.render();
      },
      render: function() {
        var $el;
        $el = $(this.el);
        $el.empty();
        return _.each(this.collection.models, function(dataType) {
          var i, props, sel, selected, _i, _len;
          selected = dataType.get("selected");
          props = dataType.get("properties");
          for (i = _i = 0, _len = selected.length; _i < _len; i = ++_i) {
            sel = selected[i];
            if ((sel != null) && (i != null)) {
              $el.append(props[i]);
            }
          }
          return this;
        });
      }
    });
    PropertyItemEditor = Backbone.View.extend({
      template: $("#property-item-editor").html()
    });
    PropertyItem = Backbone.View.extend({
      template: $("#property-item").html()
    });
    Property = Backbone.Model.extend({
      initialize: function() {
        return console.log(this);
      }
    });
    DataSingle = Backbone.View.extend({
      template: $("#data-type").html(),
      updateTemplate: $("#add-property").html(),
      tagName: 'li',
      initialize: function() {
        return _.bindAll(this, 'render');
      },
      render: function() {
        var $el, i, prop, props, _i, _len;
        $el = $(this.el);
        $el.prepend(_.template(this.template, this.model.attributes));
        props = this.model.get("properties");
        for (i = _i = 0, _len = props.length; _i < _len; i = ++_i) {
          prop = props[i];
          $el.append(prop);
        }
        return this;
      },
      events: {
        "click .property": function(e) {
          var $t, prop, selected;
          $t = $(e.currentTarget);
          prop = parseInt($t.data("property"));
          $t.toggleClass("selected");
          selected = this.model.get("selected");
          selected[prop] = selected[prop] ? false : true;
          this.model.set('selected', selected);
          return selectedData.render();
        },
        "click .add-property": function(e) {
          return $(this.el).find("ul").append(_.template(this.updateTemplate, {}));
        },
        "click .close": function(e) {
          return $(e.currentTarget).closest("li").fadeOut("fast", function() {
            return $(this).remove();
          });
        },
        "click .hide-properties": function(e) {
          var $t;
          $t = $(e.currentTarget);
          $t.children(".icon").toggleClass("flipped");
          return $t.siblings("ul").slideToggle("fast");
        }
      }
    });
    ClassList = Backbone.Collection.extend({
      url: "/class",
      model: DataType,
      initialize: function() {
        var that;
        that = this;
        this.fetch({
          success: function() {
            dataview = new DataView({
              collection: that
            });
            return selectedData = new SelectedDataList({
              collection: that
            });
          },
          failure: function() {
            return alert("could not get data from URL " + that.url);
          }
        });
        return this;
      }
    });
    return classes = new ClassList();
  });

}).call(this);
