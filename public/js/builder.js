// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(document).ready(function() {
    /* 
        MUST be bound to the window, so as not to leak into 
        global namespace and still have access to other scripts
    */

    var _ref, _ref1, _ref2;
    window.copiedModel = null;
    window.globals = {
      setPlaceholders: function(draggable, collection) {
        var after, before;
        draggable.before(before = new views.droppablePlaceholder({
          collection: collection
        }).render()).after(after = new views.droppablePlaceholder({
          collection: collection
        }).render());
        if (before.prev().css("display") === "inline-block") {
          return before.css("height", before.prev().height() + "px");
        }
      }
    };
    window.models.Element = (function(_super) {
      __extends(Element, _super);

      function Element() {
        _ref = Element.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Element.prototype.initialize = function() {
        var self;
        self = this;
        return this.on({
          "change:view": function(model, view, opts) {
            var collection, index;
            collection = model.collection;
            index = collection.indexOf(model);
            console.log(collection);
            if ((collection != null) && typeof collection !== "undefined") {
              collection.remove(model, {
                no_history: true
              });
              return collection.add(model, {
                at: index,
                no_history: true
              });
            }
          }
        });
      };

      Element.prototype.defaults = function() {
        var child_els;
        child_els = new collections.Elements();
        child_els.model = this;
        return {
          "child_els": child_els,
          "inFlow": true,
          classes: [],
          styles: {
            background: null,
            border: {
              left: {},
              right: {},
              top: {},
              bottom: {}
            },
            'box-shadow': null,
            color: null,
            font: {
              size: null,
              weight: null
            },
            opacity: null
          },
          title: "Default Title"
        };
      };

      Element.prototype.url = function() {
        var url;
        url = "/section/";
        url += this.id != null ? this.id : "";
        return url;
      };

      Element.prototype.modelify = function(basicObj) {
        var el;
        el = new models.Element(basicObj);
        return el.deepCopy();
      };

      Element.prototype.parse = function(response) {
        var section, self;
        console.log(response);
        self = this;
        section = [];
        _.each(response.currentSection, function(element) {
          return section.push(self.modelify(element));
        });
        return response;
      };

      Element.prototype.blend = function(putIn, at) {
        var children;
        cc("blending");
        if (putIn == null) {
          return false;
        }
        if ($.isArray(putIn) === true && putIn.length > 1) {
          if (putIn.indexOf(this) !== -1) {
            alert("you may not drag shit into itself. DIVIDE BY ZERO");
            return false;
          }
          _.each(putIn, function(model) {
            return model.collection.remove(model, {
              no_history: true
            });
          });
        } else if (putIn.collection != null) {
          putIn.collection.remove(putIn, {
            no_history: true
          });
        }
        children = this.get("child_els");
        children.add(putIn, {
          at: at
        });
        this.set("child_els", children);
        return true;
      };

      Element.prototype.deepCopy = function() {
        var children, clone, model, self;
        model = this;
        clone = model.clone();
        if (clone.get("child_els").models != null) {
          children = clone.get("child_els").clone();
        } else {
          children = new collections.Elements(clone.get("child_els")).clone();
        }
        self = this;
        _.each(children.models, function(child) {
          return child = child.deepCopy();
        });
        clone.set("child_els", children);
        return clone;
      };

      return Element;

    })(Backbone.Model);
    window.collections.Elements = Backbone.Collection.extend({
      model: models.Element,
      url: '/section/',
      blend: function(putIn, at) {
        cc("blending");
        if (putIn == null) {
          return false;
        }
        if ($.isArray(putIn) === true && putIn.length > 1) {
          _.each(putIn, function(model) {
            return model.collection.remove(model, {
              no_history: true
            });
          });
        } else if (putIn.collection != null) {
          putIn.collection.remove(putIn, {
            no_history: true
          });
        }
        this.add(putIn, {
          at: at
        });
        return true;
      },
      reorder: function(newIndex, originalIndex, collection, options) {
        var temp;
        if (newIndex === originalIndex) {
          return this;
        }
        collection = collection || this;
        temp = collection.at(originalIndex);
        collection.remove(temp, {
          organizer: {
            itemRender: false,
            render: false
          },
          no_history: true
        });
        collection.add(temp, {
          at: newIndex,
          organizer: {
            itemRender: false,
            render: false
          }
        });
        return this;
      },
      gather: function(prop) {
        var models, self;
        prop = prop || "layout-item";
        models = [];
        self = this;
        _.each(this.models, function(model) {
          if (model[prop] === true) {
            models.push(model);
          }
          return models = models.concat(model.get("child_els").gather());
        });
        return models;
      },
      clone: function() {
        var copy;
        copy = new collections.Elements();
        _.each(this.models, function(element) {
          return copy.add(element.deepCopy(), {
            no_history: true
          });
        });
        return copy;
      },
      compare: function(collection) {
        var comparison, self;
        self = this;
        comparison = true;
        _.each(collection.models, function(model, i) {
          if (JSON.stringify(model.attributes) !== JSON.stringify(self.at(i).attributes)) {
            console.log(JSON.stringify(model.attributes), JSON.stringify(self.at(i).attributes));
            cc("faseeeeee");
            return comparison = false;
          }
        });
        return comparison;
      }
    });
    window.views.droppablePlaceholder = (function(_super) {
      __extends(droppablePlaceholder, _super);

      function droppablePlaceholder() {
        _ref1 = droppablePlaceholder.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      droppablePlaceholder.prototype.contextMenu = $("#placeholder-context").html();

      droppablePlaceholder.prototype.tagName = 'div';

      droppablePlaceholder.prototype.className = 'droppable-placeholder';

      droppablePlaceholder.prototype.initialize = function() {
        return console.log(this.events);
      };

      droppablePlaceholder.prototype.events = {
        "click .paste-element": function(e) {
          var clone, dropZone, insertAt, models;
          clone = window.copiedModel;
          dropZone = this.$el;
          if ((dropZone.closest(".builder-element").length)) {
            insertAt = dropZone.closest(".builder-element").children(".children").children(".builder-element").index(dropZone.prev());
          } else {
            insertAt = dropZone.closest("section").children(".children").children(".builder-element").index(dropZone.prev());
          }
          insertAt += 1;
          if ((this.collection != null) && (clone != null)) {
            this.collection.add(clone, {
              at: insertAt,
              opname: 'Paste'
            });
            if ($.isArray(clone)) {
              models = [];
              _.each(clone, function(model) {
                return models.push(model.deepCopy());
              });
              window.copiedModel = models;
            } else {
              window.copiedModel = clone.deepCopy();
            }
          }
          return e.stopPropagation();
        },
        "remove": function() {
          return this.remove();
        },
        "contextmenu": function(e) {
          var $el, pageX, pageY;
          $(".context-menu").remove();
          e.preventDefault();
          $el = this.$el;
          pageX = e.pageX - $el.offset().left;
          pageY = e.pageY - $el.offset().top;
          $("<ul />").html(_.template(this.contextMenu, {})).addClass("context-menu").css({
            "top": pageY + "px",
            "left": pageX + "px"
          }).appendTo(this.$el);
          e.stopPropagation();
          return false;
        }
      };

      droppablePlaceholder.prototype.render = function() {
        var ghostFragment, self;
        self = this;
        ghostFragment = this.$el;
        return ghostFragment.droppable({
          accept: ".builder-element, .outside-draggables li, .property",
          greedy: true,
          tolerance: 'pointer',
          over: function(e, ui) {
            if ($(document.body).hasClass("active-modal")) {
              return false;
            }
            return $(e.target).addClass("show");
          },
          out: function(e, ui) {
            return $(e.target).removeClass("show").find("ul").remove();
          },
          drop: function(e, ui) {
            var curr, dropZone, insertAt, parent;
            $(".over").removeClass("over");
            if ($(document.body).hasClass("active-modal")) {
              return false;
            }
            dropZone = $(e.target);
            if ((dropZone.closest(".builder-element").length)) {
              insertAt = dropZone.closest(".builder-element").children(".children").children(".builder-element").index(dropZone.prev());
            } else {
              insertAt = dropZone.closest("section").children(".children").children(".builder-element").index(dropZone.prev());
            }
            insertAt += 1;
            curr = window.currentDraggingModel;
            parent = self.collection.model;
            if (typeof parent === "function" || (parent == null)) {
              parent = self.collection;
            }
            parent.blend(curr, insertAt);
            $(e.target).css("opacity", 0);
            delete window.currentDraggingModel;
            window.currentDraggingModel = null;
            return ui.helper.fadeOut(300);
          }
        });
      };

      return droppablePlaceholder;

    })(Backbone.View);
    /* A configurable element bound to a property or page element
        Draggable, droppable, nestable.
    */

    window.views.draggableElement = (function(_super) {
      __extends(draggableElement, _super);

      function draggableElement() {
        _ref2 = draggableElement.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      draggableElement.prototype.template = $("#draggable-element").html();

      draggableElement.prototype.controls = $("#drag-controls").html();

      draggableElement.prototype.contextMenu = $("#context-menu-default").html();

      draggableElement.prototype.tagName = 'div';

      draggableElement.prototype.className = 'builder-element';

      draggableElement.prototype.modelListeners = {};

      draggableElement.prototype.initialize = function() {
        cc("making a new draggable");
        _.bindAll(this, "render", "bindDrag", "bindListeners");
        this.on("bindListeners", this.bindListeners);
        this.bindDrag();
        return this.bindListeners();
      };

      draggableElement.prototype.bindListeners = function() {
        var self;
        self = this;
        this.stopListening();
        this.listenTo(this.model.get("child_els"), {
          'add': function(m, c, o) {
            if (!(typeof self.itemName === "undefined")) {
              m.set("view", self.itemName);
            }
            return self.appendChild(m, o);
          }
        });
        this.modelListeners = _.extend({}, this.modelListeners, {
          "change:classes": function() {
            return this.render(false);
          },
          "change:child_els": function() {
            self.bindListeners();
            return self.render();
          },
          "change:inFlow": function(model) {
            if (model.get("inFlow") === true) {
              return self.$el.slideDown("fast").next(".droppable-placeholder").slideDown("fast").prev(".droppable-placeholder").slideDown("fast");
            } else {
              return self.$el.slideUp("fast").next(".droppable-placeholder").slideUp("fast").prev(".droppable-placeholder").slideUp("fast");
            }
          },
          "remove": function() {
            self.$el.next(".droppable-placeholder").remove();
            return self.remove();
          },
          "sorting": function() {
            return self.$el.addClass("selected-element");
          },
          "end-sorting": function() {
            if (self.$el.hasClass("ui-selected") === false) {
              return self.$el.removeClass("selected-element");
            }
          },
          "renderBase": function() {
            return self.render(false);
          },
          "render": function() {
            return self.render(true);
          }
        });
        return this.listenTo(this.model, this.modelListeners);
      };

      draggableElement.prototype.render = function(do_children) {
        var $el, children, model, that;
        if (typeof do_children === "undefined") {
          do_children = true;
        }
        (this.beforeRender || function() {
          return {};
        })();
        that = this;
        model = this.model;
        model["layout-item"] = false;
        children = model.get("child_els");
        $el = this.$el;
        $el.html(_.template(this.template, model.toJSON()));
        if (this.controls != null) {
          $el.append(_.template(this.controls, model.toJSON()));
        }
        if ($el.children(".children").length === 0) {
          $el.append("<ul class='children'></ul>");
        }
        if ((children != null) && do_children === true) {
          if (children.length > 0) {
            this.$el.children(".placeholder").hide();
          }
          _.each(children.models, function(el) {
            return that.appendChild(el, {});
          });
        }
        this.applyClasses();
        this.checkPlaceholder();
        this.$(".view-attrs").first().trigger("click");
        (this.afterRender || function() {})();
        return this;
      };

      draggableElement.prototype.bindDrag = function() {
        var that;
        that = this;
        return this.$el.draggable({
          cancel: ".no-drag, .context-menu",
          revert: true,
          scrollSensitivity: 100,
          helper: function() {
            var selected, self, wrap;
            selected = that.$el.closest("section").find(".ui-selected, .selected-element");
            self = $(this);
            if (!self.hasClass("selected-element")) {
              return self;
            }
            console.log("helper");
            wrap = $("<div />").html(self.clone()).css("width", "100%");
            selected.each(function() {
              console.log("eachin");
              if (!self.is(this)) {
                if ($(this).index() > self.index()) {
                  return wrap.append($(this).clone());
                } else {
                  return wrap.prepend($(this).clone());
                }
              }
            });
            return wrap.addClass("selected-element");
          },
          cursor: "move",
          start: function(e, ui) {
            var allDraggingModels, sect_interface, section;
            if (e.shiftKey === true) {
              return false;
            }
            sect_interface = allSections.at(currIndex);
            section = sect_interface.get("currentSection");
            ui.helper.addClass("dragging");
            if (ui.helper.hasClass("selected-element")) {
              allDraggingModels = section.gather();
            } else {
              allDraggingModels = [];
            }
            console.log(allDraggingModels.length);
            if (allDraggingModels.length > 1) {
              return window.currentDraggingModel = allDraggingModels;
            } else {
              return window.currentDraggingModel = that.model;
            }
          },
          stop: function(e, ui) {
            return $(ui.helper).removeClass("dragging");
          }
        });
      };

      draggableElement.prototype.removeFromFlow = function(e) {
        var destroy, that;
        that = this;
        destroy = function() {
          return that.model.set("inFlow", false);
        };
        if (e.type === "flowRemoveViaDrag") {
          this.$el.toggle("clip", 300, destroy);
        } else {
          destroy();
        }
        e.stopPropagation();
        return e.stopImmediatePropagation();
      };

      draggableElement.prototype.checkPlaceholder = function() {};

      draggableElement.prototype.applyClasses = function() {
        var $el;
        $el = this.$el;
        return _.each(this.model.get("classes"), function(style) {
          return $el.addClass(style);
        });
      };

      draggableElement.prototype.blankLayout = function(e) {
        var collection, layout, layoutIndex, selected;
        cc(currIndex);
        collection = allSections.at(window.currIndex).get("currentSection");
        selected = collection.gather();
        if (selected.length === 0 || selected.length === 1) {
          return;
        }
        layoutIndex = collection.indexOf(selected[0]);
        collection.add(layout = new models.Element({
          view: 'DynamicLayout',
          type: 'Dynamic Layout'
        }), {
          at: layoutIndex,
          no_history: true
        });
        _.each(selected, function(model) {
          if (model.collection != null) {
            model.collection.remove(model, {
              no_history: true
            });
          }
          return layout.get("child_els").add(model);
        });
        if (e != null) {
          e.stopPropagation();
        }
        return this;
      };

      draggableElement.prototype.exportAsSection = function() {
        var copy, title, wrapper;
        title = this.model.get("title");
        if (title === "" || typeof title === "undefined" || title === "Default Section Title") {
          alert("You need to enter a title");
          return false;
        }
        copy = new models.SectionController();
        wrapper = new collections.Elements();
        wrapper.add(this.model);
        copy.set({
          currentSection: wrapper,
          section_title: title
        });
        copy.save(null, {
          success: function() {
            $("<div />").addClass("modal center").html("You saved the section").appendTo(document.body);
            $(document.body).addClass("active-modal");
            return $(".modal").delay(2000).fadeOut("fast", function() {
              $(this).remove();
              return $(document.body).removeClass("active-modal");
            });
          }
        });
        return true;
      };

      draggableElement.prototype.bindContextMenu = function(e) {
        var $el, pageX, pageY;
        if (this.contextMenu == null) {
          return true;
        } else if (e.shiftKey === true) {
          this.unbindContextMenu(e);
          return true;
        }
        this.unbindContextMenu(e);
        e.preventDefault();
        $el = this.$el;
        pageX = e.pageX - $el.offset().left;
        pageY = e.pageY - $el.offset().top;
        $("<ul />").html(_.template(this.contextMenu, this.model.toJSON())).addClass("context-menu").css({
          "top": pageY + "px",
          "left": pageX + "px"
        }).appendTo(this.$el);
        e.stopPropagation();
        return false;
      };

      draggableElement.prototype.unbindContextMenu = function(e) {
        var menu;
        menu = $(".context-menu");
        if ((e != null) && $(e.currentTarget).hasClass("context-menu")) {
          return false;
        } else if (!menu.length) {
          return false;
        }
        return menu.remove();
      };

      draggableElement.prototype.events = {
        "dblclick": function(e) {
          console.log(this.model);
          return e.stopPropagation();
        },
        "contextmenu": "bindContextMenu",
        "click .context-menu > li.copy-element": function() {
          var copy;
          copy = this.model.deepCopy();
          return window.copiedModel = copy;
        },
        "click .group-elements": "blankLayout",
        "click .export": "exportAsSection",
        "click .destroy-element": function() {
          return this.model.destroy();
        },
        "click .context-menu": function(e) {
          $(e.currentTarget).remove();
          return e.stopPropagation();
        },
        "click": function(e) {
          var layout;
          this.unbindContextMenu(e);
          this.$el.find(".dropdown").hide();
          if (e.shiftKey === true) {
            layout = this.model["layout-item"];
            if (layout === false || typeof layout === "undefined") {
              this.$el.trigger("select");
            } else {
              this.$el.trigger("deselect");
            }
          }
          e.stopPropagation();
          return e.stopImmediatePropagation();
        },
        "click .set-options": function(e) {
          var $t, dropdown;
          this.unbindContextMenu(e);
          $t = $(e.currentTarget);
          dropdown = $t.children(".dropdown");
          $(".dropdown").not(dropdown).hide();
          dropdown.fadeToggle(100);
          return e.stopPropagation();
        },
        "click .set-options li": function(e) {
          this.unbindContextMenu(e);
          e.preventDefault();
          return e.stopPropagation();
        },
        "click .view-attrs": function() {
          var props;
          props = new views.toolbelt.Actives({
            model: this.model
          }).render().el;
          $(".quick-props").find("ul").remove();
          return $(".quick-props").append(props);
        },
        "click .remove-from-flow": function(e) {
          e.stopPropagation();
          return this.removeFromFlow(e);
        },
        "flowRemoveViaDrag": "removeFromFlow",
        "click .config-panel": function(e) {
          var defaultEditor, editor;
          defaultEditor = this.model.get("layout") === true ? "BaseLayoutEditor" : "BaseEditor";
          editor = views.editors[this.edit_view || this.model.get("view") || defaultEditor];
          if (editor != null) {
            editor = new editor({
              model: this.model,
              link_el: this.el
            }).render();
          } else {
            editor = new views.editors[defaultEditor]({
              model: this.model,
              link_el: this.el
            }).render();
          }
          return $(editor.el).launchModal();
        },
        "select": function(e) {
          this.model["layout-item"] = true;
          this.$el.addClass("selected-element");
          e.stopPropagation();
          return e.stopImmediatePropagation();
        },
        "deselect": function(e) {
          this.model["layout-item"] = false;
          this.$el.removeClass("selected-element");
          e.stopPropagation();
          return e.stopImmediatePropagation();
        },
        "sorting": function() {
          return this.$el.addClass("active-sorting");
        },
        "end-sorting": function() {
          return this.$el.removeClass("active-sorting");
        }
      };

      return draggableElement;

    })(Backbone.View);
    return window.views.SectionBuilder = Backbone.View.extend({
      rendered: false,
      initialize: function() {
        this.controller = this.options.controller;
        this.wrapper = $(".control-section").eq(this.controller.index);
        this.$el = this.wrapper.find("section");
        this.collection = this.options.collection;
        return this.render();
      },
      render: function(children) {
        var $el, that;
        if (this.rendered !== true) {
          this.rendered = true;
          $el = this.$el;
          that = this;
          return this.append(this.scaffold = new models.Element({
            view: "BuilderWrapper"
          }));
        }
      },
      append: function(element, opts) {
        var draggable, view;
        view = element.get("view");
        element.set("child_els", this.collection);
        this.$el.append(draggable = $(new views[view]({
          model: element
        }).render().el));
        this.removeExtraPlaceholders();
        return draggable;
      },
      removeExtraPlaceholders: function() {
        return this.$el.find(".droppable-placeholder").each(function() {
          var $t, flag;
          $t = $(this);
          flag = 0;
          if ($t.next().hasClass("droppable-placeholder")) {
            $t.next().remove();
          }
          if ($t.prev().hasClass("droppable-placeholder")) {
            $t.prev().remove();
          }
          if (!$t.next().hasClass("builder-element")) {
            flag += 1;
          }
          if (!$t.prev().hasClass("builder-element")) {
            flag += 1;
          }
          if (flag === 2) {
            return $t.remove();
          }
        });
      }
    });
  });

}).call(this);
