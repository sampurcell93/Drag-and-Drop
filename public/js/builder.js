// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(document).ready(function() {
    /* 
        MUST be bound to the window, so as not to leak into 
        global namespace and still have access to other scripts
    */

    var _ref, _ref1;
    window.globals = {
      setPlaceholders: function(draggable, collection) {
        console.log("next one ", draggable.next(".droppable-placeholder"), " prev one", draggable.prev(".droppable-placeholder"));
        if (draggable.next(".droppable-placeholder").length === 0) {
          draggable.after(new window.views.droppablePlaceholder({
            collection: collection
          }).render());
        }
        if (draggable.prev(".droppable-placeholder").length === 0) {
          return draggable.before(new window.views.droppablePlaceholder({
            collection: collection
          }).render());
        }
      }
    };
    window.models.Element = Backbone.Model.extend({
      defaults: function() {
        return {
          "child_els": new collections.Elements(),
          "inFlow": true
        };
      },
      url: function() {
        var url;
        url = "/section/";
        url += this.id != null ? this.id : "";
        return url;
      },
      modelify: function(child_els) {
        var self, temp;
        self = this;
        temp = new collections.Elements();
        _.each(child_els, function(model) {
          var tempModel;
          temp.add(tempModel = new models.Element(model));
          return tempModel.set("child_els", self.modelify(tempModel.get("child_els")));
        });
        return temp;
      },
      parse: function(response) {
        response.child_els = this.modelify(response.child_els);
        return response;
      },
      blendModels: function(putIn) {
        var children;
        if ($.isArray(putIn) === true && putIn.length > 1) {
          if (putIn.indexOf(this) !== -1) {
            alert("you may not drag shit into itself. DIVIDE BY ZERO");
            return false;
          }
          _.each(putIn, function(model) {
            return model.collection.remove(model);
          });
        } else if (putIn.collection != null) {
          putIn.collection.remove(putIn);
        }
        children = this.get("child_els");
        if (children != null) {
          this.set("child_els", children.add(putIn));
        }
        return true;
      },
      updateListItems: function(text, index) {
        var listItems;
        if (this.get("type") === "Numbered List" || this.get("type") === "Bulleted List") {
          listItems = this.get("listItems");
          if (listItems != null) {
            listItems[index] = {};
            listItems[index].text = text;
          } else {
            listItems.splice(index, 0, {
              text: text
            });
          }
          return this.set("listItems", listItems);
        }
      }
    });
    window.collections.Elements = Backbone.Collection.extend({
      model: models.Element,
      url: '/section/',
      reorder: function(newIndex, originalIndex, collection) {
        var temp;
        console.log(originalIndex, newIndex);
        collection = collection || this;
        temp = collection.at(originalIndex);
        collection.remove(temp, {
          organizer: {
            itemRender: false
          }
        });
        collection.add(temp, {
          at: newIndex,
          organizer: {
            itemRender: false
          }
        });
        return this;
      },
      gather: function(prop) {
        var models, self;
        prop = prop || "layout-item";
        models = [];
        self = this;
        _.each(this.models, function(model) {
          if (model[prop] === true) {
            models.push(model);
          }
          return models.concat(model.get("child_els").gather());
        });
        return models;
      }
    });
    window.views.droppablePlaceholder = (function(_super) {
      __extends(droppablePlaceholder, _super);

      function droppablePlaceholder() {
        _ref = droppablePlaceholder.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      droppablePlaceholder.prototype.render = function() {
        var ghostFragment, self;
        self = this;
        ghostFragment = $("<div/>").addClass("droppable-placeholder").text("");
        return ghostFragment.droppable({
          accept: ".builder-element, .generic-elements li",
          greedy: true,
          tolerance: 'pointer',
          over: function(e, ui) {
            return $(e.target).css("opacity", 1);
          },
          out: function(e, ui) {
            return $(e.target).css("opacity", 0);
          },
          drop: function(e, ui) {
            var c, curr, dropZone, insertAt;
            dropZone = $(e.target);
            ui.helper.fadeOut(300);
            if ((dropZone.closest(".builder-element").length)) {
              insertAt = dropZone.closest(".builder-element").children(".builder-element").index(dropZone.prev()) + 1;
            } else {
              insertAt = dropZone.closest("section").children(".builder-element").index(dropZone.prev()) + 1;
            }
            if (insertAt === -1) {
              insertAt = 0;
            }
            console.log(insertAt);
            curr = window.currentDraggingModel;
            c = curr.collection;
            if ((c != null) && c !== self.collection) {
              c.remove(curr);
              curr.set("inFlow", true);
            }
            self.collection.add(curr, {
              at: insertAt
            });
            delete window.currentDraggingModel;
            window.currentDraggingModel = null;
            return e.target.remove();
          }
        });
      };

      return droppablePlaceholder;

    })(Backbone.View);
    /* A configurable element bound to a property or page element
        Draggable, droppable, nestable.
    */

    window.views.draggableElement = (function(_super) {
      __extends(draggableElement, _super);

      function draggableElement() {
        _ref1 = draggableElement.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      draggableElement.prototype.template = $("#draggable-element").html();

      draggableElement.prototype.controls = $("#drag-controls").html();

      draggableElement.prototype.tagName = 'div class="builder-element"';

      draggableElement.prototype.initialize = function() {
        var self;
        console.log("initing the parent class");
        self = this;
        this.index = this.options.index;
        _.bindAll(this, "render", "bindDrop", "bindDrag", "setStyles", "appendChild");
        this.listenTo(this.model.get("child_els"), 'add', function(m, c, o) {
          return self.appendChild(m, o);
        });
        this.listenTo(this.model, {
          "change:styles": this.setStyles,
          "change:inFlow": function(model) {
            if (model.get("inFlow") === true) {
              return self.$el.slideDown("fast");
            } else {
              return self.$el.slideUp("fast").prev(".droppable-placeholder").remove();
            }
          },
          "remove": function() {
            self.$el.next(".droppable-placeholder").remove();
            return self.remove();
          },
          "sorting": function() {
            return self.$el.addClass("selected-element");
          },
          "end-sorting": function() {
            if (self.$el.hasClass("ui-selected") === false) {
              return self.$el.removeClass(".selected-element");
            }
          }
        });
        this.bindDrop();
        return this.bindDrag();
      };

      draggableElement.prototype.render = function() {
        var $el, children, model, that;
        (this.beforeRender || function() {
          return {};
        })();
        that = this;
        model = this.model;
        children = model.get("child_els");
        $el = this.$el;
        this.setStyles();
        $el.html(_.template(this.template, model.toJSON())).append(_.template(this.controls, {}));
        if (children != null) {
          _.each(children.models, function(el) {
            return that.appendChild(el, {});
          });
        }
        (this.afterRender || function() {
          return {};
        })();
        return this;
      };

      draggableElement.prototype.appendChild = function(child, opts) {
        var builderChildren, draggable, i, view;
        view = child.get("view") || "draggableElement";
        if (child.get("inFlow") === true) {
          i = this.index || sectionIndex;
          draggable = $(new views[view]({
            model: child,
            index: i
          }).render().el).addClass("builder-child");
          if ((opts != null) && (opts.at == null)) {
            this.$el.append(draggable);
          } else {
            builderChildren = this.$el.children(".builder-element");
            if (builderChildren.eq(opts.at).length) {
              builderChildren.eq(opts.at).before(draggable);
            } else {
              this.$el.append(draggable);
            }
          }
          return globals.setPlaceholders($(draggable), this.model.get("child_els"));
        }
      };

      draggableElement.prototype.setStyles = function() {
        var styles;
        styles = this.model.get("styles");
        if (styles != null) {
          return this.$el.css(styles);
        }
      };

      draggableElement.prototype.bindDrag = function() {
        var cancel, that;
        that = this;
        cancel = ".config-menu-wrap, input, textarea, [contentEditable], [contenteditable], .add-list-item, .generic-list li, .no-drag";
        return this.$el.draggable({
          cancel: cancel,
          revert: true,
          scrollSensitivity: 100,
          helper: function() {
            var selected, self, wrap;
            selected = that.$el.closest("section").find(".ui-selected, .selected-element");
            self = $(this);
            if (!self.hasClass("selected-element")) {
              return self;
            }
            wrap = $("<div />").html(self.clone()).css("width", "100%");
            selected.each(function() {
              if (!(self.is(this) || $(this).hasClass("builder-child"))) {
                return wrap.append($(this).clone());
              }
            });
            return wrap.addClass("selected-element");
          },
          cursor: "move",
          start: function(e, ui) {
            var allDraggingModels, sect_interface, section;
            if (e.shiftKey === true) {
              return false;
            }
            sect_interface = allSections.at(that.index);
            section = sect_interface.get("currentSection");
            ui.helper.addClass("dragging");
            if (ui.helper.hasClass("selected-element")) {
              allDraggingModels = section.gather();
            } else {
              allDraggingModels = [];
            }
            if (allDraggingModels.length > 1) {
              return window.currentDraggingModel = allDraggingModels;
            } else {
              return window.currentDraggingModel = that.model;
            }
          },
          stop: function(e, ui) {
            return $(ui.helper).removeClass("dragging");
          }
        });
      };

      draggableElement.prototype.bindDrop = function() {
        var that;
        that = this;
        return this.$el.droppable({
          greedy: true,
          tolerance: 'pointer',
          accept: '.builder-element, .generic-elements li',
          over: function(e) {
            return $(e.target).addClass("over");
          },
          out: function(e) {
            return $(e.target).removeClass("over");
          },
          drop: function(e, ui) {
            var builder, draggingModel, model, sect_interface, section;
            sect_interface = allSections.at(that.index || currIndex);
            section = sect_interface.get("currentSection");
            builder = sect_interface.get("builder");
            $(e.target).removeClass("over");
            model = that.model;
            draggingModel = window.currentDraggingModel;
            if (draggingModel.collection !== model.get("child_els")) {
              if (model.blendModels(draggingModel) === true) {
                $(ui.helper).remove();
                ui.draggable.data('dropped', true);
                delete window.currentDraggingModel;
                return window.currentDraggingModel = null;
              }
            }
          }
        });
      };

      draggableElement.prototype.removeFromFlow = function(e) {
        var destroy, that;
        that = this;
        destroy = function() {
          that.model.set("inFlow", false);
          e.stopPropagation();
          return e.stopImmediatePropagation();
        };
        if (e.type === "flowRemoveViaDrag") {
          return this.$el.toggle("clip", 300, destroy);
        } else {
          return destroy();
        }
      };

      draggableElement.prototype.test = function() {
        return console.log("test");
      };

      draggableElement.prototype.events = {
        "click": function(e) {
          var layout;
          layout = this.model["layout-item"];
          if (e.shiftKey === true) {
            if (layout === false || typeof layout === "undefined") {
              this.$el.trigger("select");
            } else {
              this.$el.trigger("deselect");
            }
            e.stopPropagation();
            return e.stopImmediatePropagation();
          }
        },
        "click .set-options": function(e) {
          var $t, dropdown;
          $t = $(e.currentTarget);
          dropdown = $t.children(".dropdown");
          dropdown.fadeToggle(100);
          return e.stopPropagation();
        },
        "click .set-options li": function(e) {
          e.preventDefault();
          return e.stopPropagation();
        },
        "click .remove-from-flow": "removeFromFlow",
        "flowRemoveViaDrag": "removeFromFlow",
        "click .config-panel": function(e) {
          var editor;
          return editor = new views.ElementEditor({
            model: this.model,
            view: this
          }).render();
        },
        "select": function(e) {
          this.model["layout-item"] = true;
          this.$el.addClass("selected-element");
          e.stopPropagation();
          return e.stopImmediatePropagation();
        },
        "deselect": function(e) {
          this.model["layout-item"] = false;
          this.$el.removeClass("selected-element");
          e.stopPropagation();
          return e.stopImmediatePropagation();
        },
        "sorting": function() {
          console.log(this);
          return this.$el.addClass("active-sorting");
        },
        "end-sorting": function() {
          return this.$el.removeClass("active-sorting");
        }
      };

      return draggableElement;

    })(Backbone.View);
    return window.views.SectionBuilder = Backbone.View.extend({
      initialize: function() {
        var $el, that;
        this.controller = this.options.controller;
        this.wrapper = $(".control-section").eq(this.controller.index);
        this.$el = this.wrapper.find("section");
        this.collection = this.options.collection;
        that = this;
        $el = this.$el;
        this.listenTo(this.collection, {
          "add": function(m, c, opts) {
            return that.append(m, opts);
          }
        });
        $el.droppable({
          accept: '.builder-element, .generic-elements li',
          hoverClass: "dragging",
          activeClass: "dragging",
          greedy: true,
          helper: 'clone',
          revert: 'invalid',
          tolerance: 'pointer',
          over: function() {},
          drop: function(event, ui) {
            var c, curr;
            curr = window.currentDraggingModel;
            c = curr.collection;
            if ((c != null) && c !== that.collection) {
              c.remove(curr);
              curr.set("inFlow", true);
              that.collection.add(curr);
              delete window.currentDraggingModel;
              return window.currentDraggingModel = null;
            } else {
              return that.collection.add(curr);
            }
          }
        });
        return $el.selectable({
          filter: '.builder-element',
          cancel: ".builder-element",
          tolerance: 'touch',
          selecting: function(e, ui) {
            console.log(e);
            return $(ui.selecting).trigger("select");
          },
          unselecting: function(e, ui) {
            var $item;
            console.log(ui);
            if (e.shiftKey === true) {
              return;
            }
            $item = $(ui.unselecting);
            $item.trigger("deselect");
            return that.wrapper.find(".selected-element").trigger("deselect");
          }
        });
      },
      render: function() {
        var $el, that;
        $el = this.$el;
        that = this;
        $el.empty();
        return _.each(this.collection.models, function(element) {
          return that.append(element, {});
        });
      },
      append: function(element, opts) {
        var draggable, view;
        view = element.get("view") || "draggableElement";
        if (element.get("inFlow") === false) {
          return null;
        }
        draggable = new views[view]({
          model: element,
          index: this.controller.index
        }).render().el;
        if ((opts != null) && (opts.at == null)) {
          this.$el.append(draggable);
        } else {
          if (this.$el.children(".builder-element").eq(opts.at).length) {
            this.$el.children(".builder-element").eq(opts.at).before(draggable);
          } else {
            this.$el.children(".builder-element").eq(opts.at - 1).after(draggable);
          }
        }
        console.log(this.controller.get("currentSection"));
        return globals.setPlaceholders($(draggable), this.controller.get("currentSection"));
      }
    });
  });

}).call(this);
