// Generated by CoffeeScript 1.6.3
(function() {
  $(document).ready(function() {
    /* 
        MUST be bound to the window, so as not to leak into 
        global namespace and still have access to other scripts
    */

    window.models = {};
    window.views = {};
    window.collections = {};
    window.views.PropertyOrganizer = Backbone.View.extend({
      el: '#organize-properties',
      initialize: function() {
        /* Render the list, then apply the drag and drop, and sortable functions.*/

        var that;
        _.bindAll(this, "sortProperties");
        this.render();
        that = this;
        return this.$el.sortable({
          axis: 'y',
          tolerance: 'touch',
          connectWith: 'ul',
          handle: '.sort-element',
          items: '> li',
          cursorAt: {
            top: 50
          },
          start: function(e, ui) {
            return that.origIndex = $(ui.item).index();
          },
          stop: function(e, ui) {
            return that.sortProperties($(ui.item).index());
          }
        });
      },
      render: function() {
        var $el, that;
        $el = this.$el;
        $el.empty();
        that = this;
        return _.each(this.collection.models, function(prop) {
          var itemView;
          itemView = new views.PropertyItem({
            model: prop,
            draggable: true,
            editable: false,
            sortable: true
          });
          return $el.append(itemView.render().el);
        });
      },
      sortProperties: function(newIndex) {
        var temp;
        temp = this.collection.at(this.origIndex);
        this.collection.remove(temp);
        this.collection.add(temp, {
          at: newIndex
        });
        return window.builder.render();
      }
    });
    /* A configurable element bound to a property or page element
        Draggable, droppable, nestable.
    */

    window.views.draggableElement = Backbone.View.extend({
      template: $("#draggable-element").html(),
      tagName: function() {
        var child, options, width;
        options = this.options;
        child = this.options.child === true ? "child " : "";
        width = options.width != null ? options.width + " " : "";
        return 'div class="builder-element"' + child + width;
      },
      initialize: function() {
        return _.bindAll(this, "render", "bindDrop", "bindDrag");
      },
      render: function() {
        this.$el.append(_.template(this.template, this.model.attributes));
        this.bindDrop();
        this.bindDrag();
        return this;
      },
      bindDrag: function() {
        var cancel, that;
        that = this;
        cancel = ".sort-element, .set-options";
        cancel += this.options.child ? "" : ", .child";
        return this.$el.draggable({
          cancel: cancel,
          revert: "invalid",
          cursor: "move",
          start: function() {
            if (typeof builder !== "undefined" && builder !== null) {
              return builder.currentModel = that.model;
            }
          },
          stop: function(e, ui) {
            if (ui.helper.data('dropped') === true) {
              return $(e.target).remove();
            } else {
              return console.log("bad drop");
            }
          }
        });
      },
      bindDrop: function() {
        var that;
        that = this;
        return this.$el.droppable({
          greedy: true,
          tolerance: 'pointer',
          accept: '*',
          over: function(e) {
            return $(e.target).addClass("over");
          },
          out: function(e) {
            return $(e.target).removeClass("over");
          },
          drop: function(e, ui) {
            var addTo, curr;
            $(e.target).removeClass("over");
            addTo = that.model;
            curr = builder.currentModel;
            $(e.target).append(new views.draggableElement({
              child: true,
              model: curr
            }).render().el);
            $(ui.item).remove();
            return ui.draggable.data('dropped', true);
          }
        });
      },
      events: {
        "click .config-panel": function() {
          return console.log("yolo");
        },
        "click .set-options li": function(e) {
          e.preventDefault();
          return e.stopPropagation();
        },
        "click .set-options": function(e) {
          var $t, dropdown;
          $t = $(e.currentTarget);
          dropdown = $t.find(".dropdown");
          return dropdown.fadeToggle(100);
        }
      }
    });
    window.collections.Elements = Backbone.Collection.extend({
      model: Element
    });
    window.models.Element = Backbone.Model.extend({});
    window.views.SectionBuilder = Backbone.View.extend({
      el: 'section.builder-container',
      initialize: function() {
        var $el, that;
        this.render();
        that = this;
        $el = this.$el;
        $el.droppable({
          accept: 'li, .child',
          hoverClass: "dragging",
          activeClass: "dragging",
          tolerance: 'pointer',
          drop: function(event, ui) {
            var newEl, prop, temp;
            prop = that.currentModel.attributes;
            newEl = new models.Element({
              properties: prop,
              name: prop.name
            });
            temp = new views.draggableElement({
              model: newEl
            }).render().el;
            return that.$el.append(temp);
          }
        });
        return this.currentModel = null;
      },
      render: function() {
        var that;
        that = this;
        this.$el.empty();
        return _.each(this.collection.models, function(element) {
          if (element.selected === true) {
            return that.$el.append(new views.draggableElement({
              model: element,
              name: element.get("name")
            }).render().el);
          }
        });
      },
      setLayout: function() {}
    });
    $.fn.liveDraggable = function(opts) {
      return $("section").delegate("div", "mouseover", function() {
        if (!$(this).data("init")) {
          return $(this).data("init", true).draggable(opts);
        }
      });
    };
    return this;
  });

}).call(this);
