// Generated by CoffeeScript 1.6.3
(function() {
  $(document).ready(function() {
    /* 
    		MUST be bound to the window, so as not to leak into 
    		global namespace and still have access to other scripts
    */

    window.PropertyOrganizer = Backbone.View.extend({
      el: '#organize-properties',
      initialize: function() {
        /* Render the list, then apply the drag and drop, and sortable functions.*/

        var that;
        _.bindAll(this, "sortProperties");
        this.render();
        that = this;
        return this.$el.sortable({
          axis: 'y',
          tolerance: 'touch',
          connectWith: 'ul',
          item: 'li',
          handle: '.sort-element',
          cursorAt: {
            top: 50
          },
          start: function(e, ui) {
            return that.origIndex = $(ui.item).index();
          },
          stop: function(e, ui) {
            return that.sortProperties($(ui.item).index());
          }
        });
      },
      render: function() {
        var $el, that;
        $el = this.$el;
        $el.empty();
        that = this;
        return _.each(this.collection.models, function(prop) {
          var itemView;
          itemView = new PropertyItem({
            model: prop,
            draggable: true,
            editable: false,
            sortable: true
          });
          return $el.append(itemView.render().el);
        });
      },
      sortProperties: function(newIndex) {
        var temp;
        temp = this.collection.at(this.origIndex);
        this.collection.remove(temp);
        this.collection.add(temp, {
          at: newIndex
        });
        return window.builder.render();
      }
    });
    /* A configurable element bound to a property or page element
    		Draggable, droppable, nestable.
    */

    window.draggableElement = Backbone.View.extend({
      template: $("#draggable-element").html(),
      innerTemplate: $("#inner-element").html(),
      tagName: 'div class="builder-element"',
      initialize: function() {
        var that;
        that = this;
        this.$el.draggable({
          cancel: ".sort-element, .set-options",
          revert: "invalid",
          connectToSortable: "#organize-properties",
          cursor: "move",
          delay: 50,
          start: function() {
            console.log("starting drag");
            if (window.builder != null) {
              return window.builder.currentModel = that.model;
            }
          },
          stop: function(e, ui) {
            var $t;
            return $t = $(e.target);
          }
        });
        return this.$el.droppable({
          greedy: true,
          tolerance: 'pointer',
          accept: '*',
          over: function(e) {
            return $(e.target).addClass("over");
          },
          drop: function(e, ui) {
            var curr, temp;
            curr = window.builder.currentModel;
            temp = _.template(that.innerTemplate, curr.attributes);
            $(e.target).append(temp);
            return $(ui.item).remove();
          }
        });
      },
      render: function() {
        this.$el.append(_.template(this.template, this.model.attributes));
        return this;
      },
      events: {
        "click .config-panel": function() {
          return console.log("yolo");
        },
        "click .set-options li": function(e) {
          e.preventDefault();
          return e.stopPropagation();
        },
        "click .set-options": function(e) {
          var $t, dropdown;
          $t = $(e.currentTarget);
          dropdown = $t.find(".dropdown");
          $(".dropdown").not(dropdown).hide();
          return dropdown.fadeToggle(100);
        }
      }
    });
    window.SectionBuilder = Backbone.View.extend({
      el: 'section.builder-container',
      initialize: function() {
        var $el, that;
        console.log(this.collection);
        this.render();
        that = this;
        $el = this.$el;
        return $el.droppable({
          accept: 'li',
          hoverClass: "dragging",
          activeClass: "dragging",
          tolerance: 'pointer',
          drop: function(event, ui) {
            var $temp, $theid;
            $temp = $(new draggableElement({
              model: that.currentModel
            }).render().el);
            $theid = that.appendnow($temp, $el);
            return that.setLayout();
          }
        });
      },
      render: function() {
        var that;
        that = this;
        this.$el.empty();
        return _.each(this.collection.models, function(element) {
          if (element.selected === true) {
            return that.$el.append(new draggableElement({
              model: element
            }).render().el);
          }
        });
      },
      appendnow: function($item, $whereto) {
        var item, temp, that;
        that = this;
        ({
          drop: function(e, ui) {
            var curr;
            return curr = window.builder.currentModel;
          }
        });
        temp = _.template(that.innerTemplate, curr.attributes);
        $(e.target).append(temp);
        $(ui.item).remove();
        item = $item.appendTo($whereto);
        item.droppable({
          greedy: true,
          tolerance: 'pointer',
          accept: '*',
          drop: drop
        });
        return that.$el.find().liveDraggable({
          revert: 'invalid',
          cancel: '.set-options',
          containment: 'parent'
        });
      },
      setLayout: function() {}
    });
    $.fn.liveDraggable = function(opts) {
      return $("section").delegate("div", "mouseover", function() {
        if (!$(this).data("init")) {
          return $(this).data("init", true).draggable(opts);
        }
      });
    };
    return this;
  });

}).call(this);
