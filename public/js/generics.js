// Generated by CoffeeScript 1.6.3
(function() {
  $(document).ready(function() {
    var genericCollection, genericList;
    window.models.GenericElement = Backbone.Model.extend({});
    window.collections.GenericElements = Backbone.Collection.extend({
      model: models.GenericElement,
      url: '/generic'
    });
    window.views.GenericList = Backbone.View.extend({
      el: '.generic-elements',
      initialize: function() {
        return this.render();
      },
      render: function() {
        var $el;
        $el = this.$el;
        _.each(this.collection.models, function(el) {
          return $el.append(new views.GenericItem({
            model: el
          }).render().el);
        });
        return this;
      }
    });
    window.views.GenericItem = Backbone.View.extend({
      initialize: function() {
        var self;
        self = this;
        return this.$el.draggable({
          revert: "invalid",
          helper: "clone",
          cursor: "move",
          start: function(e, ui) {
            var toAdd;
            $(ui.helper).addClass("dragging");
            toAdd = new models.Element(self.model.toJSON());
            toAdd.set("child_els", new collections.Elements());
            if (typeof builder !== "undefined" && builder !== null) {
              builder.currentModel = toAdd;
              builder.fromSideBar = false;
              return console.log(self.model.get("template"));
            }
          },
          stop: function(e, ui) {
            $(ui.helper).removeClass("dragging");
            if (ui.helper.data('dropped') === true) {
              return $(e.target).remove();
            }
          }
        });
      },
      template: $("#generic-element").html(),
      tagName: 'li',
      render: function() {
        var $el;
        $el = this.$el;
        $el.html(_.template(this.template, this.model.toJSON()));
        return this;
      }
    });
    genericList = null;
    genericCollection = new collections.GenericElements();
    return genericCollection.fetch({
      success: function(coll) {
        return genericList = new views.GenericList({
          collection: coll
        });
      }
    });
  });

}).call(this);
