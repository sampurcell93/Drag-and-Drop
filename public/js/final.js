// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(document).ready(function() {
    /* 
        MUST be bound to the window, so as not to leak into 
        global namespace and still have access to other scripts
    */

    var _ref, _ref1, _ref2;
    window.copiedModel = null;
    window.models.Element = (function(_super) {
      __extends(Element, _super);

      function Element() {
        _ref = Element.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Element.prototype.initialize = function() {
        var self;
        self = this;
        return this.on({
          "change:view": function(model, view, opts) {
            var collection, index;
            collection = model.collection;
            index = collection.indexOf(model);
            console.log(collection);
            if ((collection != null) && typeof collection !== "undefined") {
              collection.remove(model, {
                no_history: true
              });
              return collection.add(model, {
                at: index,
                no_history: true
              });
            }
          }
        });
      };

      Element.prototype.defaults = function() {
        var child_els;
        child_els = new collections.Elements();
        child_els.model = this;
        return {
          "child_els": child_els,
          "inFlow": true,
          classes: [],
          styles: {
            background: null,
            border: {
              left: {},
              right: {},
              top: {},
              bottom: {}
            },
            'box-shadow': null,
            color: null,
            font: {
              size: null,
              weight: null
            },
            opacity: null
          },
          title: "Default Title",
          editable: true
        };
      };

      Element.prototype.url = function() {
        var url;
        url = "/section/";
        url += this.id != null ? this.id : "";
        return url;
      };

      Element.prototype.modelify = function(basicObj) {
        var el;
        el = new models.Element(basicObj);
        return el.deepCopy();
      };

      Element.prototype.parse = function(response) {
        var section, self;
        self = this;
        section = [];
        _.each(response.currentSection, function(element) {
          return section.push(self.modelify(element));
        });
        return response;
      };

      Element.prototype.blend = function(putIn, at) {
        var children;
        if (putIn == null) {
          return false;
        }
        if ($.isArray(putIn) === true && putIn.length > 1) {
          if (putIn.indexOf(this) !== -1) {
            alert("you may not drag shit into itself. DIVIDE BY ZERO");
            return false;
          }
          _.each(putIn, function(model) {
            return model.collection.remove(model, {
              no_history: true
            });
          });
        } else if (putIn.collection != null) {
          putIn.collection.remove(putIn, {
            no_history: true
          });
        }
        children = this.get("child_els");
        children.add(putIn, {
          at: at,
          opname: "switch"
        });
        this.set("child_els", children);
        return true;
      };

      Element.prototype.deepCopy = function() {
        var children, clone, model, self;
        model = this;
        clone = model.clone();
        if (clone.get("child_els").models != null) {
          children = clone.get("child_els").clone();
        } else {
          children = new collections.Elements(clone.get("child_els")).clone();
        }
        self = this;
        _.each(children.models, function(child) {
          return child = child.deepCopy();
        });
        clone.set("child_els", children);
        return clone;
      };

      return Element;

    })(Backbone.Model);
    window.collections.Elements = Backbone.Collection.extend({
      model: models.Element,
      url: '/section/',
      blend: function(putIn, at) {
        if (putIn == null) {
          return false;
        }
        if ($.isArray(putIn) === true && putIn.length > 1) {
          _.each(putIn, function(model) {
            return model.collection.remove(model, {
              no_history: true
            });
          });
        } else if (putIn.collection != null) {
          putIn.collection.remove(putIn, {
            no_history: true
          });
        }
        this.add(putIn, {
          at: at
        });
        return true;
      },
      reorder: function(newIndex, originalIndex, collection, options) {
        var op, temp;
        if ((options != null) && (options.opname != null)) {
          op = options.opname;
        }
        if (newIndex === originalIndex) {
          return this;
        }
        collection = collection || this;
        temp = collection.at(originalIndex);
        collection.remove(temp, {
          organizer: {
            itemRender: false,
            render: false
          },
          no_history: true
        });
        collection.add(temp, {
          at: newIndex,
          organizer: {
            itemRender: false,
            render: false
          },
          opname: op
        });
        return this;
      },
      gather: function(prop) {
        var models, self;
        prop = prop || "selected";
        models = [];
        self = this;
        _.each(this.models, function(model) {
          if (model[prop] === true) {
            models.push(model);
          }
          return models = models.concat(model.get("child_els").gather());
        });
        return models;
      },
      clone: function() {
        var copy;
        copy = new collections.Elements();
        _.each(this.models, function(element) {
          return copy.add(element.deepCopy(), {
            no_history: true
          });
        });
        return copy;
      },
      compare: function(collection) {
        return _.isEqual(this.models, collection.models);
      }
    });
    window.views.droppablePlaceholder = (function(_super) {
      __extends(droppablePlaceholder, _super);

      function droppablePlaceholder() {
        _ref1 = droppablePlaceholder.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      droppablePlaceholder.prototype.contextMenu = $("#placeholder-context").html();

      droppablePlaceholder.prototype.tagName = 'div';

      droppablePlaceholder.prototype.className = 'droppable-placeholder';

      droppablePlaceholder.prototype.events = {
        "click .paste-element": function(e) {
          var clone, dropZone, insertAt, models;
          clone = window.copiedModel;
          dropZone = this.$el;
          insertAt = dropZone.siblings(".builder-element").index(dropZone.prev()) + 1;
          if ((this.collection != null) && (clone != null)) {
            this.collection.add(clone, {
              at: insertAt,
              opname: 'Paste'
            });
            if ($.isArray(clone)) {
              models = [];
              _.each(clone, function(model) {
                return models.push(model.deepCopy());
              });
              window.copiedModel = models;
            } else {
              window.copiedModel = clone.deepCopy();
            }
          }
          return e.stopPropagation();
        },
        "remove": "remove",
        "contextmenu": function(e) {
          var $el, pageX, pageY;
          e.stopPropagation();
          if (window.copiedModel === null) {
            return true;
          }
          $(".context-menu").remove();
          e.preventDefault();
          $el = this.$el;
          pageX = e.pageX - $el.offset().left;
          pageY = e.pageY - $el.offset().top;
          $("<ul />").html(_.template(this.contextMenu, {})).addClass("context-menu").css({
            "top": pageY + "px",
            "left": pageX + "px"
          }).appendTo(this.$el);
          return false;
        }
      };

      droppablePlaceholder.prototype.render = function() {
        var self;
        self = this;
        return this.$el.droppable({
          accept: ".builder-element, .outside-draggables li, .property",
          greedy: true,
          tolerance: 'pointer',
          over: function(e, ui) {
            if ($(document.body).hasClass("active-modal")) {
              return false;
            }
            return $(e.target).addClass("show");
          },
          out: function(e, ui) {
            return $(e.target).removeClass("show").find("ul").remove();
          },
          drop: function(e, ui) {
            var curr, dropZone, insertAt, parent;
            $(e.target).removeClass("show");
            $(".over").removeClass("over");
            if ($(document.body).hasClass("active-modal")) {
              return false;
            }
            dropZone = $(e.target);
            insertAt = dropZone.siblings(".builder-element").index(dropZone.prev()) + 1;
            curr = window.currentDraggingModel;
            if (!$.isArray(curr) && curr.get("inFlow") === false) {
              cc("drop inflowing");
              curr.set("inFlow", true);
              return;
            }
            parent = self.collection.model;
            if (typeof parent === "function" || (parent == null)) {
              parent = self.collection;
            }
            parent.blend(curr, insertAt);
            delete window.currentDraggingModel;
            window.currentDraggingModel = null;
            return ui.helper.fadeOut(300);
          }
        });
      };

      return droppablePlaceholder;

    })(Backbone.View);
    /* A configurable element bound to a property or page element
        Draggable, droppable, nestable.
    */

    window.views.draggableElement = (function(_super) {
      __extends(draggableElement, _super);

      function draggableElement() {
        _ref2 = draggableElement.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      draggableElement.prototype.template = $("#draggable-element").html();

      draggableElement.prototype.controls = $("#drag-controls").html();

      draggableElement.prototype.contextMenu = $("#context-menu-default").html();

      draggableElement.prototype.tagName = 'div';

      draggableElement.prototype.className = 'builder-element';

      draggableElement.prototype.modelListeners = {};

      draggableElement.prototype.initialize = function() {
        _.bindAll(this, "render", "bindDrag", "bindListeners", "bindResize");
        this.on("bindListeners", this.bindListeners);
        this.bindDrag();
        return this.bindListeners();
      };

      draggableElement.prototype.bindResize = function() {
        var grid_block, parent, parent_width;
        parent = this.options.parent;
        parent_width = parent.width();
        grid_block = parent_width / 6;
        return this.$el.resizable({
          handles: "e",
          containment: 'parent',
          grid: grid_block,
          autoHide: true,
          resize: function(e, ui) {
            parent_width = parent.width();
            grid_block = parent_width / 6;
            $(this).resizable("option", "grid", grid_block);
            return ui.helper.css({
              "position": "relative",
              "top": "",
              "left": ""
            });
          },
          start: function(e, ui) {
            return ui.helper.css({
              "position": "relative",
              "top": "",
              "left": ""
            });
          }
        });
      };

      draggableElement.prototype.bindListeners = function() {
        var self;
        self = this;
        this.stopListening();
        this.listenTo(this.model.get("child_els"), {
          'add': function(m, c, o) {
            if (!(typeof self.itemName === "undefined")) {
              m.set("view", self.itemName);
            }
            return self.appendChild(m, o);
          },
          'reset': this.render
        });
        this.modelListeners = _.extend({}, this.modelListeners, {
          "change:classes": function() {
            return this.render(false);
          },
          "change:child_els": function() {
            self.bindListeners();
            return self.render();
          },
          "change:inFlow": function(model) {
            if (model.get("inFlow") === true) {
              return self.$el.slideDown("fast").next(".droppable-placeholder").slideDown("fast").prev(".droppable-placeholder").slideDown("fast");
            } else {
              self.$el.slideUp("fast").next(".droppable-placeholder").hide();
              return self.$el.prev(".droppable-placeholder").hide();
            }
          },
          "remove": function() {
            self.$el.next(".droppable-placeholder").remove();
            return self.remove();
          },
          "link-feedback": function() {
            return self.$el.addClass("link-feedback");
          },
          "end-feedback": function() {
            return self.$el.removeClass("link-feedback");
          },
          "renderBase": function() {
            return self.render(false);
          },
          "render": function() {
            return self.render(true);
          },
          "showConfigModal": this.showConfigModal
        });
        return this.listenTo(this.model, this.modelListeners);
      };

      draggableElement.prototype.render = function(do_children) {
        var $el, children, model, that;
        if (typeof do_children === "undefined") {
          do_children = true;
        }
        (this.beforeRender || function() {
          return {};
        })();
        that = this;
        model = this.model;
        model["selected"] = false;
        children = model.get("child_els");
        $el = this.$el;
        $el.html(_.template(this.template, model.toJSON()));
        if (this.controls != null) {
          $el.append(_.template(this.controls, model.toJSON()));
        }
        if ($el.children(".children").length === 0) {
          $el.append($("<ul/>").addClass("children"));
        }
        if ((children != null) && do_children === true) {
          if (children.length > 0) {
            this.$el.children(".placeholder").hide();
          }
          _.each(children.models, function(el) {
            return that.appendChild(el, {});
          });
        }
        this.applyClasses();
        this.checkPlaceholder();
        this.$(".view-attrs").first().trigger("click");
        (this.afterRender || function() {})();
        return this;
      };

      draggableElement.prototype.bindDrag = function() {
        var that;
        that = this;
        return this.$el.draggable({
          cancel: ".no-drag, .context-menu, .ui-resizable-handle",
          revert: true,
          scrollSensitivity: 100,
          helper: function() {
            var selected, self, wrap;
            selected = that.$el.closest("section").find(".ui-selected, .selected-element");
            self = $(this);
            if (!self.hasClass("selected-element")) {
              return self;
            }
            console.log("helper");
            wrap = $("<div />").html(self.clone()).css("width", "100%");
            selected.each(function() {
              console.log("eachin");
              if (!self.is(this)) {
                if ($(this).index() > self.index()) {
                  return wrap.append($(this).clone());
                } else {
                  return wrap.prepend($(this).clone());
                }
              }
            });
            return wrap.addClass("selected-element");
          },
          cursor: "move",
          start: function(e, ui) {
            var allDraggingModels, sect_interface, section;
            if (e.shiftKey === true) {
              return false;
            }
            sect_interface = allSections.at(currIndex);
            section = sect_interface.get("currentSection");
            ui.helper.addClass("dragging");
            if (ui.helper.hasClass("selected-element")) {
              allDraggingModels = section.gather();
            } else {
              allDraggingModels = [];
            }
            console.log(allDraggingModels.length);
            if (allDraggingModels.length > 1) {
              return window.currentDraggingModel = allDraggingModels;
            } else {
              return window.currentDraggingModel = that.model;
            }
          },
          stop: function(e, ui) {
            return $(ui.helper).removeClass("dragging");
          }
        });
      };

      draggableElement.prototype.removeFromFlow = function(e) {
        var destroy, that;
        that = this;
        destroy = function() {
          return that.model.set("inFlow", false, {
            opname: "Flow Out"
          });
        };
        if (e.type === "flowRemoveViaDrag") {
          this.$el.toggle("clip", 300, destroy);
        } else {
          destroy();
        }
        e.stopPropagation();
        return e.stopImmediatePropagation();
      };

      draggableElement.prototype.checkPlaceholder = function() {};

      draggableElement.prototype.applyClasses = function() {
        var $el;
        $el = this.$el;
        return _.each(this.model.get("classes"), function(style) {
          return $el.addClass(style);
        });
      };

      draggableElement.prototype.blankLayout = function(e) {
        var collection, layout, layoutIndex, selected;
        cc(currIndex);
        collection = allSections.at(window.currIndex).get("currentSection");
        selected = collection.gather();
        if (selected.length === 0 || selected.length === 1) {
          return;
        }
        layoutIndex = collection.indexOf(selected[0]);
        collection.add(layout = new models.Element({
          view: 'DynamicLayout',
          type: 'Dynamic Layout'
        }), {
          at: layoutIndex,
          no_history: true
        });
        _.each(selected, function(model) {
          if (model.collection != null) {
            model.collection.remove(model, {
              no_history: true
            });
          }
          return layout.get("child_els").add(model);
        });
        if (e != null) {
          e.stopPropagation();
        }
        return this;
      };

      draggableElement.prototype.exportAsSection = function() {
        var copy, title, wrapper;
        title = this.model.get("title");
        if (title === "" || typeof title === "undefined" || title === "Default Section Title") {
          alert("You need to enter a title");
          return false;
        }
        copy = new models.SectionController();
        wrapper = new collections.Elements();
        wrapper.add(this.model);
        copy.set({
          currentSection: wrapper,
          section_title: title
        });
        copy.save(null, {
          success: function() {
            $("<div />").addClass("modal center").html("You saved the section").appendTo(document.body);
            $(document.body).addClass("active-modal");
            return $(".modal").delay(2000).fadeOut("fast", function() {
              $(this).remove();
              return $(document.body).removeClass("active-modal");
            });
          }
        });
        return true;
      };

      draggableElement.prototype.bindContextMenu = function(e) {
        var $el, item, pageX, pageY;
        if (this.contextMenu == null) {
          return true;
        } else if (e.shiftKey === true) {
          this.unbindContextMenu(e);
          return true;
        }
        this.unbindContextMenu(e);
        e.preventDefault();
        $el = this.$el;
        pageX = e.pageX - $el.offset().left;
        pageY = e.pageY - $el.offset().top;
        item = this.model.toJSON();
        item.selected = false;
        if (this.model["selected"] === true) {
          item.selected = true;
        }
        $("<ul />").html(_.template(this.contextMenu, item)).addClass("context-menu").css({
          "top": pageY + "px",
          "left": pageX + "px"
        }).appendTo(this.$el);
        e.stopPropagation();
        return false;
      };

      draggableElement.prototype.unbindContextMenu = function(e) {
        var menu;
        menu = $(".context-menu");
        if ((e != null) && $(e.currentTarget).hasClass("context-menu")) {
          return false;
        }
        return menu.remove();
      };

      draggableElement.prototype.showConfigModal = function(e) {
        var defaultEditor, editor;
        defaultEditor = this.model.get("layout") === true ? "BaseLayoutEditor" : "BaseEditor";
        editor = views.editors[this.edit_view || this.model.get("view") || defaultEditor];
        if (editor != null) {
          editor = new editor({
            model: this.model,
            link_el: this.el
          }).render();
        } else {
          editor = new views.editors[defaultEditor]({
            model: this.model,
            link_el: this.el
          }).render();
        }
        return $(editor.el).launchModal();
      };

      draggableElement.prototype.selectEl = function() {
        var layout;
        layout = this.model["selected"];
        if (layout === false || typeof layout === "undefined") {
          return this.$el.trigger("select");
        } else {
          return this.$el.trigger("deselect");
        }
      };

      draggableElement.prototype.events = {
        "dblclick": function(e) {
          console.log(this.model.toJSON());
          this.showConfigModal();
          return e.stopPropagation();
        },
        "click": function(e) {
          this.unbindContextMenu(e);
          this.$el.find(".dropdown").hide();
          if (e.shiftKey === true || e.ctrlKey === true) {
            this.selectEl();
          }
          e.preventDefault();
          e.stopPropagation();
          return false;
        },
        "contextmenu": "bindContextMenu",
        "click .context-menu > li.copy-element": function() {
          var copy;
          copy = this.model.deepCopy();
          return window.copiedModel = copy;
        },
        "click .context-menu > li.select-this": function() {
          return this.selectEl();
        },
        "click .group-elements": "blankLayout",
        "click .export": "exportAsSection",
        "click .destroy-element": function() {
          return this.model.destroy();
        },
        "click .context-menu": function(e) {
          $(e.currentTarget).remove();
          return e.stopPropagation();
        },
        "click .set-options": function(e) {
          var $t, dropdown;
          this.unbindContextMenu(e);
          $t = $(e.currentTarget);
          dropdown = $t.children(".dropdown");
          $(".dropdown").not(dropdown).hide();
          dropdown.fadeToggle(100);
          return e.stopPropagation();
        },
        "click .set-options li": function(e) {
          this.unbindContextMenu(e);
          e.preventDefault();
          return e.stopPropagation();
        },
        "click .view-attrs": function(e) {
          var button, props;
          props = new views.toolbelt.Actives({
            model: this.model
          }).render().el;
          $(".quick-props").find("ul").html(props);
          if ((e != null) && e.isTrigger === true) {
            return;
          }
          button = $(".quick-props").find(".close-arrow");
          return button.trigger("click");
        },
        "click .remove-from-flow": function(e) {
          e.stopPropagation();
          return this.removeFromFlow(e);
        },
        "flowRemoveViaDrag": "removeFromFlow",
        "click .config-panel": "showConfigModal",
        "select": function(e) {
          this.model["selected"] = true;
          this.$el.addClass("selected-element");
          e.stopPropagation();
          return e.stopImmediatePropagation();
        },
        "deselect": function(e) {
          this.model["selected"] = false;
          this.$el.removeClass("selected-element");
          e.stopPropagation();
          return e.stopImmediatePropagation();
        },
        "sorting": function() {
          return this.$el.addClass("active-sorting");
        },
        "end-sorting": function() {
          return this.$el.removeClass("active-sorting");
        },
        "mouseleave": function() {
          return this.$(".set-options > ul").hide();
        },
        "mouseover .config-menu-wrap > li": function(e) {
          var $t, self;
          $t = $(e.currentTarget);
          $t.data("over", true);
          self = $t;
          window.setTimeout(function() {
            if ($t.data("over") === true) {
              return self.showTooltip();
            }
          }, 500);
          return e.stopPropagation();
        },
        "mouseleave .config-menu-wrap > li": function(e) {
          var $t;
          $t = $(e.currentTarget);
          $t.data("over", false);
          $t.hideTooltip();
          return e.stopPropagation();
        }
      };

      return draggableElement;

    })(Backbone.View);
    return window.views.SectionBuilder = Backbone.View.extend({
      rendered: false,
      initialize: function() {
        this.controller = this.options.controller;
        this.wrapper = $(".control-section").eq(this.controller.index);
        this.$el = this.wrapper.find("section");
        this.collection = this.options.collection;
        return this.render();
      },
      render: function(children) {
        var $el, that;
        if (this.rendered !== true) {
          this.rendered = true;
          $el = this.$el;
          that = this;
          return this.append(this.scaffold = new models.Element({
            view: "BuilderWrapper"
          }));
        }
      },
      append: function(element, opts) {
        var draggable, view;
        view = element.get("view");
        element.set("child_els", this.collection);
        this.$el.append(draggable = $(new views[view]({
          model: element,
          parent: this.$el
        }).render().el));
        this.removeExtraPlaceholders();
        return draggable;
      },
      removeExtraPlaceholders: function() {
        return this.$el.find(".droppable-placeholder").each(function() {
          var $t, flag;
          $t = $(this);
          flag = 0;
          if ($t.next().hasClass("droppable-placeholder")) {
            $t.next().remove();
          }
          if ($t.prev().hasClass("droppable-placeholder")) {
            $t.prev().remove();
          }
          if (!$t.next().hasClass("builder-element")) {
            flag += 1;
          }
          if (!$t.prev().hasClass("builder-element")) {
            flag += 1;
          }
          if (flag === 2) {
            return $t.remove();
          }
        });
      }
    });
  });

  $(document).ready(function() {
    var sampleClasses;
    window.sectionIndex = window.currIndex = 0;
    sampleClasses = [
      {
        "name": "User",
        "properties": [
          {
            "name": "First Name"
          }, {
            "name": "Last Name"
          }, {
            "name": "Street Address"
          }, {
            "name": "City"
          }, {
            "name": "Zip"
          }
        ]
      }
    ];
    window.models.DataType = Backbone.Model.extend({
      url: function() {
        return "/class/";
      }
    });
    window.models.Property = Backbone.Model.extend({});
    /* COLLECTIONS*/

    window.collections.AllSections = Backbone.Collection.extend({
      model: models.SectionController
    });
    window.collections.Properties = Backbone.Collection.extend({
      model: models.Property
    });
    window.collections.ClassList = Backbone.Collection.extend({
      url: "/class",
      model: models.DataType
    });
    window.allSections = new collections.AllSections();
    /* IMPORTANT: Order of oparations: Model generated blank, added to collection of sections ->
        View generated on blank template, rendered ->
        Model populated, elements like builder rendered and linked to their els, made
        possible by rendering the view first.
    */

    window.views.SectionControllerView = Backbone.View.extend({
      tagName: 'div',
      wrap: '.section-builder-wrap',
      template: $("#controller-wrap").html(),
      initialize: function() {
        var self;
        self = this;
        return this.listenTo(this.model, {
          "change:title": function(model) {
            return self.$el.find(".section-title .title-wrap").text(model.get("title"));
          },
          "destroy": function() {
            return self.remove();
          }
        });
      },
      render: function() {
        this.$el.addClass("control-section").html(_.template(this.template, this.model.toJSON()));
        $(".container").droppable({
          accept: '.builder-element, .draggable-modal',
          drop: function(e, ui) {
            var models;
            models = window.currentDraggingModel;
            if (models == null) {
              return false;
            }
            if ($.isArray(models) === true) {
              ui.helper.remove();
              return _.each(models, function(model) {
                return model.set("inFlow", false);
              });
            } else {
              return models.set("inFlow", false);
            }
          }
        });
        return this;
      },
      events: {
        'click .generate-section': 'generateSection',
        'click .save-section': 'saveSection',
        'click .view-layouts': function() {
          return window.layoutCollection = new collections.Layouts();
        },
        'click .view-sections': function(e) {
          $(e.currentTarget).toggleClass("active");
          return $("#existing-sections").animate({
            height: 'toggle'
          }, 200);
        },
        'click .no-grid': function() {
          return this.$el.toggleClass("no-grid");
        },
        'click .section-title': function(e) {
          var modal, self;
          self = this;
          modal = window.launchModal(_.template($("#section-change").html(), {
            title: this.model.get("title")
          }) + "<button class='confirm m10'>OK</button>");
          modal.delegate(".change-section-title", "keyup", function() {
            var $t, title;
            $t = $(this);
            title = $t.val();
            if (title === "") {
              title = $t.data("previous-val") || "Default Title";
            }
            return self.model.set("title", title);
          });
          e.stopPropagation();
          return e.stopImmediatePropagation();
        },
        'focus .section-title': function(e) {
          return $(e.currentTarget).data("previous-val", $(e.currentTarget).val());
        },
        'blur .section-title': function(e) {
          var $t;
          $t = $(e.currentTarget);
          if ($t.val() === "") {
            return $t.val($t.data("previous-val") || "");
          }
        },
        "click .settings": function() {
          var modal, temp;
          temp = $("#settings-template").html();
          modal = window.launchModal(_.template(temp + "<button class='confirm'>OK</button>", window.settings));
          return modal.find(".hist-length").slider({
            value: window.settings.history_length,
            step: 1,
            min: 0,
            max: 100,
            slide: function(e, ui) {
              window.settings.history_length = ui.value;
              localStorage.settings.history_length = ui.value;
              return $(".history-length-label").text(ui.value);
            }
          });
        }
      },
      setProps: function() {
        var $o_el, css_modal, existing_modal, hist_modal, opts, props_modal, section, that, toolbelt;
        that = this;
        if (typeof opts === "undefined" || opts === null) {
          opts = {};
        }
        this.model.index = allSections.length - 1;
        this.existingSectionCollection = new collections.Elements();
        this.existingSectionCollection.fetch({
          success: function(coll) {
            return that.existingSectionsList = new views.ExistingSectionsList({
              collection: coll,
              controller: that.model
            });
          }
        });
        section = this.model.get("currentSection");
        this.snaps = new collections.Snapshots();
        this.histList = new views.history.HistoryList({
          controller: this,
          snapshots: this.snaps,
          collection: section
        });
        this.builder = new views.SectionBuilder({
          controller: this.model,
          collection: section
        });
        this.organizer = new views.ElementOrganizer({
          controller: this.model,
          collection: section
        });
        $o_el = this.$el.find(".accessories");
        toolbelt = this.$(".toolbelt");
        hist_modal = window.launchDraggableModal(this.histList.render().el, null, toolbelt, "History - Recent <span class='history-length-label'>15</span>");
        hist_modal.addClass("history");
        props_modal = window.launchDraggableModal($("<ul/>"), null, toolbelt, "Editable Attributes");
        props_modal.addClass("quick-props");
        css_modal = window.launchDraggableModal($("<ul/>"), null, toolbelt, "Skin Format");
        css_modal.addClass("quick-css");
        existing_modal = window.launchDraggableModal($("<ul/>").addClass("existing-sections-layouts"), null, toolbelt, "Recent Sections");
        existing_modal.addClass("existing-modal");
        $o_el.droppable({
          accept: '.moved',
          greedy: true,
          out: function(e, ui) {
            return ui.draggable.addClass("moved");
          },
          drop: function(e, ui) {
            return ui.draggable.css({
              "position": "relative"
            }).removeClass("moved");
          }
        });
        this.classes = new collections.ClassList(sampleClasses);
        this.classes.controller = this.model;
        this.dataview = new views.DataView({
          collection: this.classes,
          controller: this.model
        });
        this.selectedData = new views.SelectedDataList({
          collection: this.model.get("properties"),
          controller: this.model
        });
        this.genericList = new views.GenericList({
          controller: this.model
        });
        this.layouts = new views.LayoutList({
          controller: this.model
        });
        this.model.set({
          builder: this.builder,
          organizer: this.organizer,
          snaps: this.snaps,
          controller: this
        });
        return this;
      },
      renderComponents: function(components) {
        var component, _i, _len;
        for (_i = 0, _len = components.length; _i < _len; _i++) {
          component = components[_i];
          this[component].render();
        }
        return this.model.saved = true;
      },
      generateSection: function(e) {
        var $t;
        if (e != null) {
          $t = $(e.currentTarget);
          $t.toggleClass("viewing-layout");
        }
        return this.$el.find(this.wrap).slideToggle('fast');
      },
      saveSection: function() {
        var copy, title;
        title = this.model.get("title");
        if (title === "" || typeof title === "undefined" || title === "Default Section Title") {
          alert("You need to enter a label for the section before you can save it!");
          return false;
        }
        copy = new models.SectionController();
        copy.set({
          currentSection: this.model.get("currentSection"),
          section_title: title,
          properties: this.model.get("properties")
        });
        this.model.saved = true;
        copy.save(null, {
          success: function() {
            $("<div />").addClass("modal center").html("Section <em>\"" + title + "\"</em> successfully saved!").appendTo(document.body);
            $(document.body).addClass("active-modal");
            return $(".modal").delay(1200).fadeOut("fast", function() {
              $(this).remove();
              return $(document.body).removeClass("active-modal");
            });
          }
        });
        return true;
      }
    });
    window.views.AllSectionControllers = Backbone.View.extend({
      el: '.container',
      initialize: function() {
        var self;
        self = this;
        this.render();
        return this.listenTo(this.collection, "add", function(model) {
          return self.append(model);
        });
      },
      render: function() {
        var $el, self;
        $el = this.$el;
        $el.empty();
        self = this;
        _.each(this.collection.models, function(controller, i) {
          return self.append(controller);
        });
        return this;
      },
      append: function(model) {
        var view;
        window.currIndex = this.collection.length - 1;
        view = new views.SectionControllerView({
          model: model
        });
        this.$el.append($(view.render().el));
        view.setProps().renderComponents(["builder", "organizer"]);
        return this;
      }
    });
    window.views.SectionTabItem = Backbone.View.extend({
      template: $("#tab-item").html(),
      tagName: 'li',
      initialize: function() {
        var self;
        self = this;
        return this.listenTo(this.model, "change:title", function(m, c, o) {
          if (!((o != null) && o.no_tab === true)) {
            return self.render();
          }
        });
      },
      render: function(i) {
        if (typeof i === "string" || typeof i === "number") {
          this.$el.attr("data-id", i);
        }
        this.$el.html(_.template(this.template, {
          title: this.model.get("title")
        }));
        this.$el.droppable({
          tolerance: 'pointer',
          accept: '.builder-element',
          over: function(e, ui) {
            var $t, checkHover;
            $t = $(e.target).addClass("over");
            checkHover = function() {
              var clone, toSection;
              clone = $(ui.item).clone();
              if ($t.hasClass("over")) {
                $t.trigger("click");
                toSection = $(".control-section").eq(window.currIndex).find(".generate-section");
                if (!toSection.hasClass("viewing-layout")) {
                  return toSection.trigger("click");
                }
              }
            };
            return window.setTimeout(checkHover, 500);
          },
          out: function(e) {
            return $(e.target).removeClass("over");
          },
          drop: function(e, ui) {}
        });
        return this;
      },
      events: {
        "keyup [contentEditable]": function(e) {
          return this.model.set("title", $(e.currentTarget).text(), {
            no_tab: true
          });
        },
        "click .remove": function(e) {
          var collection, index, sure;
          if (this.model.saved === true) {
            this.model.destroy();
          } else {
            sure = confirm("Are you sure you want to close this builder? You haven't saved it.");
            if (sure === true) {
              this.model.destroy();
            } else {
              return;
            }
          }
          index = this.$el.index() - 1;
          collection = this.model.collection;
          if (index === window.currIndex) {
            if (index + 1 < collection.length) {
              this.$el.next().trigger("click");
            } else if (index - 1 >= 0) {
              this.$el.prev().trigger("click");
            } else {
              window.currIndex = 0;
            }
          }
          return e.stopPropagation();
        },
        "click": function(e) {
          var $t, index;
          window.currIndex = this.$el.index() - 1;
          $t = $(e.currentTarget);
          index = $t.addClass("current-tab").data("id");
          $t.siblings().removeClass("current-tab");
          $(".control-section").hide();
          return $(".control-section").eq(window.currIndex).show();
        }
      }
    });
    window.views.SectionTabs = Backbone.View.extend({
      el: ".tabs",
      initialize: function() {
        this.listenTo(this.collection, {
          "add": this.render,
          "remove": this.render
        });
        return this.render();
      },
      render: function() {
        var $el, len;
        $el = this.$el;
        $el.children().not(".add-section").remove();
        len = allSections.models.length;
        return _.each(allSections.models, function(section, i) {
          var tab;
          tab = new views.SectionTabItem({
            model: section
          }).render(i).el;
          $el.append(tab);
          if (i === len - 1) {
            return $(tab).hide().animate({
              "width": "show"
            }, 300).addClass("current-tab").trigger("click");
          }
        });
      },
      events: {
        "click .add-section": function(e) {
          return allSections.add(new models.SectionController());
        }
      }
    });
    window.models.SectionController = Backbone.Model.extend({
      url: '/section',
      defaults: function() {
        return {
          "currentSection": new collections.Elements(),
          "properties": new collections.Properties()
        };
      },
      initialize: function() {
        var self;
        this.saved = true;
        self = this;
        this.get("currentSection").on("all", function() {
          return self.saved = false;
        });
        return this.on("all", function() {
          return self.saved = false;
        });
      }
    });
    window.views.DataView = Backbone.View.extend({
      initialize: function() {
        this.controller = this.options.controller;
        this.wrapper = $(".control-section").eq(this.controller.index);
        this.$el = this.wrapper.find(".class-list");
        _.bindAll(this, 'render');
        return this.render();
      },
      render: function() {
        var that;
        that = this;
        this.$el.empty();
        return _.each(this.collection.models, function(prop, i) {
          if (!prop.rendered) {
            prop.rendered = true;
            return that.$el.append(new views.DataSingle({
              model: prop,
              index: that.controller.index
            }).render().el);
          }
        });
      },
      events: {
        "click .new-data-type": function() {
          var mod;
          mod = new DataType({
            name: 'Private',
            properties: []
          });
          this.collection.add(mod);
          return this.ender();
        }
      }
    });
    window.views.DataSingle = Backbone.View.extend({
      template: $("#data-type").html(),
      updateTemplate: $("#add-property").html(),
      tagName: 'li',
      initialize: function() {
        return _.bindAll(this, 'render');
      },
      render: function() {
        var $el, i, newProperty, prop, props, _i, _len;
        $el = $(this.el);
        $el.prepend(_.template(this.template, this.model.toJSON()));
        props = this.model.get("properties");
        for (i = _i = 0, _len = props.length; _i < _len; i = ++_i) {
          prop = props[i];
          newProperty = new models.Property(prop);
          newProperty.set("className", this.model.get("name"));
          $el.append(new views.PropertyItem({
            model: newProperty,
            index: this.options.index,
            editable: false
          }).render().el);
        }
        return this;
      },
      events: {
        "click .add-property": function(e) {
          var newProp, prop;
          newProp = new models.Property({
            className: this.model.get("name")
          });
          this.$el.append(prop = new views.PropertyItem({
            model: newProp,
            index: this.options.index,
            editable: true
          }).render().el);
          return this.$el.children().last().find("input[type=text]").focus();
        },
        "click .close": function(e) {
          var that;
          that = this;
          return $(e.currentTarget).toggleClass("flipped").closest("li").fadeOut("fast", function() {
            $(this).remove();
            return that.model.destroy();
          });
        },
        "click .hide-properties": function(e) {
          var $t;
          $t = $(e.currentTarget);
          $t.find("span").toggleClass("flipped");
          return $t.siblings("li").fadeToggle("fast");
        },
        "click .select-all": function() {
          return this.$el.find("input").trigger("click");
        }
      }
    });
    window.views.SelectedDataList = Backbone.View.extend({
      template: $("#configure-property").html(),
      initialize: function() {
        var self;
        this.controller = this.options.controller;
        this.wrapper = $(".control-section").eq(this.controller.index);
        this.$el = this.wrapper.find(".property-editor");
        self = this;
        this.listenTo(this.collection, {
          "add": this.append,
          "remove": function() {
            if (self.collection.length === 0) {
              return self.$(".placeholder").show();
            }
          }
        });
        _.bindAll(this, 'render');
        return this.render();
      },
      render: function() {
        var $el, self;
        $el = this.$el;
        self = this;
        return _.each(this.collection.models, function(prop) {
          return self.append(prop);
        });
      },
      append: function(prop) {
        this.$(".placeholder").hide();
        return this.$el.append(new views.PropertyItemEditor({
          model: prop
        }).render().el);
      }
    });
    window.views.PropertyItemEditor = Backbone.View.extend({
      template: $("#property-item-editor").html(),
      tagName: 'li',
      initialize: function() {
        var self;
        self = this;
        return this.listenTo(this.model, {
          "remove": function() {
            return self.$el.fadeOut("fast", function() {
              return self.remove();
            });
          },
          "change:name": this.render
        });
      },
      render: function() {
        this.$el.html(_.template(this.template, this.model.toJSON()));
        return this;
      }
    });
    window.views.PropertyItem = Backbone.View.extend({
      template: $("#property-item").html(),
      tagName: 'li class="property" ',
      render: function() {
        var item;
        item = $.extend({}, this.model.toJSON(), this.options);
        this.$el.append(_.template(this.template, item));
        return this;
      },
      chooseProp: function(e) {
        var $t, currentSection, model, selected;
        if (e != null) {
          $t = $(e.currentTarget);
          $t.closest(".property").toggleClass("selected");
          e.stopPropagation();
        }
        selected = this.model.selected;
        currentSection = allSections.at(window.currIndex).get("currentSection");
        this.model.selected = selected ? false : true;
        if (this.model.selected === true) {
          allSections.at(window.currIndex).get("properties").add(this.model);
          model = this.model.toJSON();
          model.title = model.className + "." + model.name;
          model.view = "Input";
          model.property = this.model;
          model.property.name = model.name || "";
          model.type = "Property";
          console.log(model.property);
          if (this.elementModel == null) {
            this.elementModel = new models.Element(model);
          }
          return currentSection.add(this.elementModel);
        } else {
          allSections.at(window.currIndex).get("properties").remove(this.model);
          return currentSection.remove(this.elementModel);
        }
      },
      events: {
        "click .icon-multiply": function() {
          this.model.destroy();
          return this.remove();
        },
        "click .choose-prop": "chooseProp",
        "keyup input": function(e) {
          var $t, val;
          $t = $(e.currentTarget);
          val = $t.val();
          this.model.set("name", val);
          if (this.elementModel != null) {
            return this.elementModel.set("title", val).trigger("render");
          }
        },
        'keydown': function(e) {
          var key;
          key = e.keyCode || e.which;
          if (key === 13) {
            this.$el.siblings(".add-property").trigger("click");
            this.$el.next().trigger("click");
            console.log(this.$el.next());
            e.preventDefault();
            return false;
          }
        }
      }
    });
    allSections.add(new models.SectionController());
    window.sectionTabs = new views.SectionTabs({
      collection: allSections
    });
    return window.sectionList = new views.AllSectionControllers({
      collection: allSections
    });
  });

  $(function() {
    var editors, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
    editors = window.views.editors = {};
    editors["BaseEditor"] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref = _Class.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      _Class.prototype.change_queue = [];

      _Class.prototype.className = 'modal';

      _Class.prototype.templates = [
        {
          tab: 'Element Styling',
          templates: [$("#change-styles").html()]
        }
      ];

      _Class.prototype.render = function() {
        var editor_content, self, tabs, templates;
        self = this;
        this.link_el = this.options.link_el;
        editor_content = "<ul class='tabs'>";
        tabs = _.pluck(this.templates, "tab");
        templates = this.instance_templates || this.templates;
        _.each(tabs, function(tab, i) {
          var sel;
          if (i === 0) {
            sel = "current-tab";
          } else {
            sel = "";
          }
          return editor_content += "<li class='" + sel + "' rel='" + tab.dirty() + "'>" + tab + "</li>";
        });
        editor_content += "</ul>";
        _.each(templates, function(tabcontent, i) {
          editor_content += "<div class='modal-tab' id='" + tabcontent.tab.dirty() + "'>";
          _.each(tabcontent.templates, function(template) {
            return editor_content += _.template(template, self.model.toJSON());
          });
          editor_content += "</div>";
          return true;
        });
        editor_content += _.template($("#finalize-editing").html(), {});
        return this.$el.appendTo(document.body).html(editor_content);
      };

      _Class.prototype.enqueue = function(name, func) {
        return this.change_queue[name] = func;
      };

      _Class.prototype.addTemplate = function(template, index, inner_index) {
        if (this.instance_templates == null) {
          return false;
        }
        if (!inner_index) {
          this.instance_templates[index].templates.push(template);
        } else {
          this.instance_templates[index].templates.splice(inner_index, 0, template);
        }
        return true;
      };

      _Class.prototype.addTab = function(obj, index) {
        if (this.instance_templates == null) {
          return false;
        }
        if (index != null) {
          this.instance_templates.splice(index, 0, obj);
        } else {
          this.instance_templates.push(obj);
        }
        return true;
      };

      _Class.prototype.events = {
        "change [data-attr]": function(e) {
          var $t, attr, parsed, self, val;
          $t = $(e.currentTarget);
          attr = $t.data("attr");
          val = $t.val();
          self = this;
          parsed = val.parseBool();
          if (parsed === null) {
            parsed = val;
          }
          this.enqueue(attr, function() {
            return self.model.set(attr, parsed);
          });
          return e.stopPropagation();
        },
        "change .set-width": function(e) {
          var self, width;
          width = $(e.currentTarget).val();
          self = this;
          return this.enqueue("width-change", function() {
            var classes;
            $(self.link_el).addClass(width);
            classes = self.model.get("classes");
            classes.push(width);
            return self.model.set("classes", classes);
          });
        },
        "keyup .title-setter": function() {
          var self;
          self = this;
          return this.enqueue("title", function() {
            return self.model.set("title", self.$el.find(".title-setter").val(), {
              no_history: true
            });
          });
        },
        "click .confirm": function() {
          var cq, process, _results;
          cq = this.change_queue;
          _results = [];
          for (process in cq) {
            _results.push(process = cq[process]());
          }
          return _results;
        },
        "click .reject, .confirm": function() {
          $(document.body).removeClass("active-modal");
          this.change_queue = [];
          return this.remove();
        },
        "click .tabs li": function(e) {
          var $el, $t, rel;
          $t = $(e.currentTarget);
          $el = this.$el;
          rel = "#" + $t.attr("rel");
          this.$(".modal-tab").not(rel).hide();
          $(rel).show();
          return $t.addClass("current-tab").siblings().removeClass("current-tab");
        }
      };

      return _Class;

    })(Backbone.View);
    editors["BaseLayoutEditor"] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref1 = _Class.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      _Class.prototype.templates = [
        {
          tab: 'Free Form Divisions',
          templates: [$("#column-picker").html()]
        }, {
          tab: 'Preset Layouts',
          templates: [$("#layout-changer").html(), $("#skins").html(), $("#preset-layouts").html()]
        }
      ];

      _Class.prototype.initialize = function() {
        var self;
        self = this;
        return _.extend(this.events, {
          "click .select-one li": function(e) {
            return $(e.currentTarget).addClass("selected-choice").siblings().removeClass("selected-choice");
          },
          "click [data-columns]": function(e) {
            var $t, cols, coltypes;
            coltypes = ["two", "three", "four", "five", "six"];
            $t = $(e.currentTarget);
            cols = $t.data("columns");
            if (self.model != null) {
              self.enqueue("columns", function() {
                var classes;
                self.model.set("columns", cols);
                classes = self.model.get("classes");
                classes.push("column " + cols);
                self.model.set("classes", classes);
                return console.log("applying column to ", self.model);
              });
            }
            self.enqueue("remove_col_classes", function() {
              return $(self.link_el).removeClass("column two three four five six");
            });
            if (cols !== "") {
              return this.enqueue("add_col_classes", function() {
                return $(self.link_el).addClass("column " + cols);
              });
            }
          },
          "click [data-layout]": function(e) {
            var $t, layout;
            $t = $(e.currentTarget);
            layout = $t.data("layout");
            return this.enqueue("view", function() {
              self.model.set({
                "layout": true,
                "view": layout,
                type: "Tab Layout"
              });
              return $(self.link_el).addClass("tab-layout");
            });
          },
          "click .preset-layouts li": function(e) {
            var $t, className;
            $t = $(e.currentTarget);
            className = $t.data("class");
            self = this;
            return this.enqueue("presetlayout", function() {
              self.model.set("presetlayout", className);
              return $(self.link_el).addClass(className).removeClass("column two three four five six");
            });
          }
        });
      };

      return _Class;

    })(editors["BaseEditor"]);
    editors["Button"] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref2 = _Class.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      _Class.prototype.initialize = function() {
        _Class.__super__.initialize.apply(this, arguments);
        this.instance_templates = $.extend(true, {}, this.templates);
        return this.addTemplate($("#button-editor").html(), 0);
      };

      _Class.prototype.render = function() {
        var modal;
        _Class.__super__.render.apply(this, arguments);
        this.cq = this.change_queue;
        modal = this.el || $(".modal").first();
        return this.$el = $(this.el);
      };

      return _Class;

    })(editors["BaseEditor"]);
    editors['Link'] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref3 = _Class.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      _Class.prototype.templates = [$("#link-editor").html()];

      _Class.prototype.initialize = function() {};

      return _Class;

    })(editors["BaseEditor"]);
    editors['Radio'] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref4 = _Class.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      _Class.prototype.templates = [$("#radio-editor").html()];

      _Class.prototype.initialize = function() {
        var self;
        _Class.__super__.initialize.apply(this, arguments);
        self = this;
        return _.extend(this.events, {
          "change .label-position": function(e) {
            var position;
            position = $(e.currentTarget).val();
            return self.enqueue("label_position", function() {
              return self.model.set("label_position", position);
            });
          },
          "keyup .label-text": function(e) {
            var label;
            label = $(e.currentTarget).val();
            return self.enqueue("label_text", function() {
              return self.model.set("title", label);
            });
          }
        });
      };

      return _Class;

    })(editors["BaseEditor"]);
    editors["DateTime"] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref5 = _Class.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      _Class.prototype.templates = [$("#icon-or-full").html()];

      return _Class;

    })(editors["BaseEditor"]);
    editors["Property"] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref6 = _Class.__super__.constructor.apply(this, arguments);
        return _ref6;
      }

      _Class.prototype.templates = [$("#property-editor").html()];

      return _Class;

    })(editors["BaseEditor"]);
    return editors["accordion"] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref7 = _Class.__super__.constructor.apply(this, arguments);
        return _ref7;
      }

      _Class.prototype.templates = [$("#accordion-layout").html()];

      return _Class;

    })(editors["BaseLayoutEditor"]);
  });

  $(document).ready(function() {
    window.existingSectionsList = null;
    window.views.ExistingSectionsList = Backbone.View.extend({
      initialize: function() {
        this.controller = this.options.controller;
        this.wrapper = $(".control-section").eq(this.controller.index);
        this.$el = $(".control-section").eq(this.controller.index).find(".existing-sections-layouts");
        this.el = this.$el.get();
        return this.render();
      },
      render: function() {
        var $el, self;
        $el = this.$el;
        self = this;
        return _.each(this.collection.models, function(section, i) {
          if (i === 0) {
            self.$(".placeholder").remove();
          }
          return $el.append(new views.SingleSectionWireFrame({
            model: section
          }).render().el);
        });
      }
    });
    window.views.SingleSectionWireFrame = Backbone.View.extend({
      tagName: 'li',
      template: $("#single-section").html(),
      initialize: function() {
        var self;
        this.makeModel();
        self = this;
        return this.$el.draggable({
          cancel: '.view-section',
          revert: "invalid",
          helper: "clone",
          cursor: "move",
          start: function() {
            return window.copiedModel = self.model.get("currentSection").models;
          },
          stop: function(e, ui) {
            $(ui.helper).removeClass("dragging");
            if (ui.helper.data('dropped') === true) {
              return $(e.target).remove();
            }
          }
        });
      },
      makeModel: function() {
        var copy, properties, section;
        section = this.model.get("currentSection");
        properties = this.model.get("properties");
        this.model.set("properties", new collections.Properties(properties));
        copy = new collections.Elements();
        _.each(section, function(model) {
          var el;
          el = new models.Element(model);
          return copy.add(el.deepCopy());
        });
        this.model = new models.SectionController({
          currentSection: copy,
          properties: this.model.get("properties"),
          section_title: this.model.get("section_title"),
          title: this.model.get("title")
        });
        return copy;
      },
      render: function() {
        var $el;
        $el = this.$el;
        $el.html(_.template(this.template, this.model.toJSON()));
        return this;
      },
      events: {
        "click": function() {
          return allSections.add(this.model);
        }
      }
    });
    return window.views.ElementThumbnail = Backbone.View.extend({
      tagName: 'div',
      className: 'thumb-object',
      initialize: function(opts) {
        return this.model = opts;
      },
      render: function() {
        var $el, styles;
        $el = this.$el;
        styles = this.model.styles;
        if (styles != null) {
          this.$el.css(styles);
        }
        _.each(this.model.child_els, function(child, i) {
          return $el.append(new views.ElementThumbnail({
            model: child
          }).render().el);
        });
        return this;
      }
    });
  });

  $(document).ready(function() {
    var generics, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    generics = [
      {
        "type": "Button",
        "view": "Button"
      }, {
        "type": "Custom Text",
        "view": "CustomText"
      }, {
        "type": "Custom Header",
        "view": "CustomHeader"
      }, {
        type: 'Input Field',
        view: "Input"
      }, {
        type: 'Date/Time',
        view: 'DateTime'
      }, {
        type: 'Radio',
        view: 'Radio'
      }, {
        type: 'Link',
        view: 'Link'
      }, {
        type: 'Dropdown',
        view: 'Dropdown'
      }
    ];
    window.models.GenericElement = Backbone.Model.extend({});
    window.collections.GenericElements = Backbone.Collection.extend({
      model: models.GenericElement,
      url: '/generic'
    });
    window.views.GenericList = Backbone.View.extend({
      el: ".generic-elements ul",
      initialize: function() {
        this.controller = this.options.controller;
        this.collection = new collections.GenericElements(generics);
        this.wrapper = $(".control-section").eq(this.controller.index);
        this.$el = this.wrapper.find(".generic-elements ul");
        this.el = this.$el.get();
        return this.render();
      },
      render: function() {
        var $el;
        $el = this.$el;
        _.each(this.collection.models, function(el) {
          return $el.append(new views.OutsideDraggableItem({
            model: el
          }).render().el);
        });
        return this;
      }
    });
    window.views.OutsideDraggableItem = Backbone.View.extend({
      initialize: function() {
        var baseModel, self;
        baseModel = this.model.toJSON();
        self = this;
        return this.$el.draggable({
          revert: true,
          helper: "clone",
          cursor: "move",
          start: function(e, ui) {
            var child_els, toAdd;
            $(ui.helper).addClass("dragging");
            child_els = new collections.Elements();
            toAdd = new models.Element(baseModel);
            child_els.model = toAdd;
            toAdd.set("child_els", child_els);
            return window.currentDraggingModel = toAdd;
          },
          stop: function(e, ui) {
            $(ui.item).removeClass("dragging").remove();
            if (ui.helper.data('dropped') === true) {
              return $(e.target).remove();
            }
          }
        });
      },
      template: $("#generic-element").html(),
      tagName: 'li',
      render: function() {
        var $el;
        $el = this.$el.addClass("generic-item");
        $el.html(_.template(this.template, this.model.toJSON()));
        return this;
      },
      events: {
        "click": function() {
          var child_els, toAdd;
          child_els = new collections.Elements();
          toAdd = new models.Element(this.model.toJSON());
          child_els.model = toAdd;
          toAdd.set("child_els", child_els, {
            no_history: true
          });
          console.log(allSections.at(window.currIndex));
          return cc(allSections.at(window.currIndex).get("currentSection").blend(toAdd, 0));
        }
      }
    });
    window.views.genericElement = (function(_super) {
      __extends(genericElement, _super);

      function genericElement() {
        _ref = genericElement.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      genericElement.prototype.initialize = function(options) {
        var self;
        genericElement.__super__.initialize.apply(this, arguments);
        $.extend(this.events, {
          "keyup .title-setter": function(e) {
            this.model.set('title', $(e.currentTarget).val(), {
              no_history: true
            });
            return e.stopPropagation();
          }
        });
        self = this;
        return this.model.on("change:title", function(model) {
          return self.$el.find(".label-text").first().text(self.model.get("title"));
        });
      };

      return genericElement;

    })(window.views.draggableElement);
    views["Input"] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref1 = _Class.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      _Class.prototype.template = $("#input-template").html();

      _Class.prototype.className = 'builder-element w5';

      _Class.prototype.initialize = function() {
        var self;
        _Class.__super__.initialize.apply(this, arguments);
        self = this;
        return this.model.on("change:editable", function() {
          return self.render();
        });
      };

      return _Class;

    })(views.genericElement);
    window.views['Button'] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref2 = _Class.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      _Class.prototype.template = $("#button-template").html();

      return _Class;

    })(window.views.genericElement);
    window.views['CustomHeader'] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref3 = _Class.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      _Class.prototype.template = $("#custom-header").html();

      return _Class;

    })(window.views.genericElement);
    window.views['CustomText'] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref4 = _Class.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      _Class.prototype.template = $("#custom-text").html();

      return _Class;

    })(window.views.genericElement);
    window.views['Radio'] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref5 = _Class.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      _Class.prototype.template = $("#generic-radio").html();

      _Class.prototype.initialize = function(options) {
        _Class.__super__.initialize.apply(this, arguments);
        return this.model.on({
          "change:label_position": this.render,
          "change:label_text": this.render
        });
      };

      return _Class;

    })(window.views.genericElement);
    window.views['Link'] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref6 = _Class.__super__.constructor.apply(this, arguments);
        return _ref6;
      }

      _Class.prototype.template = $("#custom-link").html();

      return _Class;

    })(window.views.genericElement);
    window.views['DateTime'] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref7 = _Class.__super__.constructor.apply(this, arguments);
        return _ref7;
      }

      _Class.prototype.template = $("#date-time").html();

      _Class.prototype.initialize = function(options) {
        _.bindAll(this, "afterRender");
        if (typeof this.model.get("display") === "undefined") {
          this.model.set("display", "full", {
            silent: true
          });
        }
        return _Class.__super__.initialize.apply(this, arguments);
      };

      _Class.prototype.afterRender = function() {
        return this.$(".date-picker").first().datepicker();
      };

      return _Class;

    })(window.views.genericElement);
    window.views['Dropdown'] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref8 = _Class.__super__.constructor.apply(this, arguments);
        return _ref8;
      }

      _Class.prototype.template = $("#dropdown").html();

      return _Class;

    })(window.views.genericElement);
    return window.views['TableCell'] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref9 = _Class.__super__.constructor.apply(this, arguments);
        return _ref9;
      }

      _Class.prototype.tagName = 'td class="builder-element"';

      return _Class;

    })(window.views.genericElement);
  });

  $(function() {
    var history;
    history = window.views.history = {};
    if (localStorage.settings == null) {
      localStorage.settings = {};
    }
    window.settings = {
      history_length: localStorage.settings.history_length || 50
    };
    window.models.Snap = Backbone.Model.extend();
    window.collections.Snapshots = Backbone.Collection.extend({
      model: window.models.Snap,
      initialize: function() {
        var snap;
        this.detached_head = false;
        snap = new models.Snap({
          snapshot: new collections.Elements()
        });
        snap.set({
          "opname": "Open",
          "type": "New Section"
        });
        return this.add(snap);
      }
    });
    history.Snapshot = Backbone.View.extend({
      tagName: 'li',
      template: $("#snapshot").html(),
      initialize: function() {
        var self;
        this.controller = this.options.controller;
        this.current = this.options.current;
        self = this;
        this.listenTo(this.model, {
          "aheadOfFlow": function() {
            return self.$el.addClass("ahead-of-flow");
          },
          "insideFlow": function() {
            return self.$el.removeClass("ahead-of-flow");
          },
          "destroy": function() {
            return self.remove();
          },
          "select": function() {
            return self.$el.trigger("click");
          }
        });
        return this;
      },
      events: {
        "click": function(e) {
          var $t, ahead_flow, all_snaps, controller, inside_flow, model_index, snapshot;
          all_snaps = this.model.collection;
          model_index = all_snaps.indexOf(this.model);
          controller = this.controller;
          snapshot = this.model.get("snapshot").clone();
          this.current.last_snap = this.$el.siblings(".selected-history").first().index() - 1;
          $t = $(e.currentTarget);
          ahead_flow = _.filter(this.model.collection.models, function(m, i) {
            return i > model_index;
          });
          inside_flow = _.filter(this.model.collection.models, function(m, i) {
            return i <= model_index;
          });
          _.each(ahead_flow, function(snap) {
            return snap.set("aheadOfFlow", true).trigger("aheadOfFlow");
          });
          _.each(inside_flow, function(snap) {
            return snap.set("aheadOfFlow", false).trigger("insideFlow");
          });
          controller.model.set("currentSection", snapshot);
          controller.organizer.collection = snapshot;
          controller.organizer.trigger("bindListeners");
          controller.organizer.render();
          controller.builder.collection = snapshot;
          controller.builder.scaffold.set("child_els", snapshot);
          if (model_index < all_snaps.length - 1) {
            all_snaps.detached_head = true;
          } else {
            all_snaps.detached_head = false;
          }
          this.current.collection = snapshot;
          this.current.bindListeners();
          e.stopPropagation();
          e.stopImmediatePropagation();
          $t.addClass("selected-history").siblings().removeClass("selected-history");
          return false;
        }
      },
      render: function() {
        this.$el.html(_.template(this.template, this.model.toJSON()));
        return this;
      }
    });
    return history.HistoryList = Backbone.View.extend({
      tagName: 'div',
      className: 'history-modal',
      initialize: function() {
        this.controller = this.options.controller;
        this.snapshots = this.options.snapshots;
        _.bindAll(this, "makeHistory", "render", "append", "bindListeners");
        this.bindListeners();
        return this;
      },
      bindListeners: function(collection) {
        var coll, self;
        this.stopListening();
        coll = collection || this.collection;
        this.listenTo(coll, {
          "all": this.makeHistory
        });
        self = this;
        _.each(coll.models, function(model) {
          return self.bindIndividualListener(model);
        });
        return this;
      },
      bindIndividualListener: function(model) {
        var children, self;
        children = model.get("child_els");
        self = this;
        this.listenTo(model, "all", this.makeHistory);
        this.listenTo(children, "all", this.makeHistory);
        _.each(children.models, function(child) {
          return self.bindIndividualListener(child);
        });
        return this;
      },
      oneAhead: function(snapshot) {
        this.collection = snapshot;
        return this;
      },
      selectLast: function() {
        var last;
        last = this.last_snap;
        if (last < this.snapshots.length && last >= 0) {
          return this.snapshots.at(last).trigger("select");
        }
      },
      makeHistory: function(operation, subject, collection, options) {
        var clone, e, op, ops, snap;
        ops = ["change", "add", "remove", "destroy"];
        if (ops.indexOf(operation) === -1) {
          return;
        }
        if (operation === "change") {
          options = collection;
        }
        if (options == null) {
          options = {};
        }
        if (!((options != null) && options.no_history === true)) {
          op = options.opname || operation;
          if (this.snapshots.detached_head === true) {
            this.deleteForwardChanges();
            this.snapshots.detached_head = false;
          }
          if (this.controller.model.get("currentSection") != null) {
            try {
              clone = this.controller.model.get("currentSection").clone();
            } catch (_error) {
              e = _error;
              return false;
            }
          }
          if (this.snapshots.length && clone.compare(this.snapshots.last())) {
            cc("SAME");
          }
          snap = new models.Snap({
            snapshot: clone
          });
          snap.set({
            "opname": op,
            "title": subject.get("title" || null),
            "type": subject.get("type" || null)
          });
          if (this.snapshots.length >= window.settings.history_length && (this.snapshots.at(0) != null)) {
            this.snapshots.at(0).destroy({
              no_history: true
            });
          }
          if (op === "add") {
            this.bindIndividualListener(subject);
          }
          this.snapshots.add(snap);
          this.append(snap);
          this.last_snap = this.snapshots.length - 2;
        }
        return this;
      },
      deleteForwardChanges: function() {
        var ahead;
        ahead = _.filter(this.snapshots.models, function(snap, i) {
          return snap.get("aheadOfFlow") === true;
        });
        _.each(ahead, function(snap) {
          return snap.destroy();
        });
        return this;
      },
      render: function() {
        var self;
        self = this;
        this.$el.empty();
        if (this.snapshots.length === 0) {
          $("<li/>").addClass("placeholder p10 center").text("No History Here.").appendTo(this.$el);
        }
        _.each(this.snapshots.models, function(snapshot) {
          return self.append(snapshot);
        });
        return this;
      },
      append: function(snapshot) {
        var $el, SnapItem, item;
        $el = this.$el;
        this.$(".placeholder").hide();
        this.$(".selected-history").removeClass("selected-history");
        SnapItem = new history.Snapshot({
          model: snapshot,
          controller: this.controller,
          current: this
        });
        $el.prepend(item = SnapItem.render().el);
        $(item).addClass("selected-history");
        return this;
      }
    });
  });

  $(document).ready(function() {
    var adjs, allLayouts, nouns, randomDict, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    adjs = ["autumn", "hidden", "bitter", "misty", "silent", "empty", "dry", "dark", "summer", "icy", "delicate", "quiet", "white", "cool", "spring", "winter", "patient", "twilight", "dawn", "crimson", "wispy", "weathered", "blue", "billowing", "broken", "cold", "damp", "falling", "frosty", "green", "long", "late", "lingering", "bold", "little", "morning", "muddy", "old", "red", "rough", "still", "small", "sparkling", "throbbing", "shy", "wandering", "withered", "wild", "black", "young", "holy", "solitary", "fragrant", "aged", "snowy", "proud", "floral", "restless", "divine", "polished", "ancient", "purple", "lively", "nameless", "protected", "fierce", "snowy", "floating", "serene", "placid", "afternoon", "calm", "cryptic", "desolate", "falling", "glacial", "limitless", "murmuring", "pacific", "whispering"];
    nouns = ["waterfall", "river", "breeze", "moon", "rain", "wind", "sea", "morning", "snow", "lake", "sunset", "pine", "shadow", "leaf", "dawn", "glitter", "forest", "hill", "cloud", "meadow", "sun", "glade", "bird", "brook", "butterfly", "bush", "dew", "dust", "field", "fire", "flower", "firefly", "feather", "grass", "haze", "mountain", "night", "pond", "darkness", "snowflake", "silence", "sound", "sky", "shape", "surf", "thunder", "violet", "water", "wildflower", "wave", "water", "resonance", "sun", "wood", "dream", "cherry", "tree", "fog", "frost", "voice", "paper", "frog", "smoke", "star", "savannah", "quarry", "mountainside", "riverbank", "canopy", "tree", "monastery", "frost", "shelf", "badlands", "crags", "lowlands", "badlands", "woodlands", "eyrie", "beach", "temple"];
    String.prototype.firstUpperCase = function() {
      return this.charAt(0).toUpperCase() + this.slice(1);
    };
    randomDict = function() {
      return (adjs[Math.floor(Math.random() * adjs.length)] + "-" + nouns[Math.floor(Math.random() * nouns.length)]).toLowerCase().firstUpperCase() + "-" + Math.floor(Math.random() * 10000);
    };
    allLayouts = [
      {
        type: 'Dynamic Layout',
        view: 'DynamicLayout'
      }, {
        type: 'Tabbed Layout',
        view: 'tabs'
      }, {
        type: 'List Layout',
        view: 'ListLayout'
      }, {
        type: 'Dynamic Grid',
        view: 'table'
      }, {
        type: 'Dynamic Repeating Layout',
        view: 'RepeatingLayout'
      }
    ];
    window.models.Layout = (function(_super) {
      __extends(Layout, _super);

      function Layout() {
        _ref = Layout.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return Layout;

    })(window.models.Element);
    window.collections.Layouts = Backbone.Collection.extend({
      model: models.Layout
    });
    window.views.LayoutList = Backbone.View.extend({
      template: $("#picker-interface").html(),
      initialize: function() {
        this.controller = this.options.controller;
        this.collection = new collections.Layouts(allLayouts);
        this.wrapper = $(".control-section").eq(this.controller.index);
        this.$el = this.wrapper.find(".layout-types ul");
        this.el = this.$el.get();
        return this.render();
      },
      render: function() {
        var $el;
        $el = this.$el;
        _.each(this.collection.models, function(layout) {
          return $el.append(new views.OutsideDraggableItem({
            model: layout
          }).render().el);
        });
        return this;
      }
    });
    window.views.layout = (function(_super) {
      __extends(layout, _super);

      function layout() {
        _ref1 = layout.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      layout.prototype.initialize = function() {
        var self;
        this.model.set("layout", true, {
          no_history: true
        });
        layout.__super__.initialize.apply(this, arguments);
        self = this;
        _.bindAll(this, "afterRender", "bindDrop", "appendChild");
        this.$el.addClass("layout-wrapper");
        this.listenTo(this.model.get("child_els"), {
          "add": function(m, c, o) {
            if ((c != null) && c.length) {
              return self.$el.children(".placeholder").hide();
            }
          },
          "remove": function(m, c, o) {
            if ((c != null) && !c.length) {
              return self.$el.children(".placeholder").show();
            }
          }
        });
        this.listenTo(this.model, {
          "change:presetlayout": function(model, attr, opts) {
            return self.formPresetLayout(attr);
          }
        });
        _.extend(this.events, {
          "click .ungroup-fields": function() {
            var child, children, i, model, parent, position, _i, _len, _ref2;
            model = this.model;
            position = model.collection.indexOf(model);
            children = model.get("child_els");
            parent = model.collection;
            _ref2 = children.models;
            for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
              child = _ref2[i];
              child['selected'] = false;
              child.collection = null;
              parent.add(child, {
                at: position + i
              });
            }
            children.reset();
            return model.destroy();
          },
          "click .paste-element": function() {
            var copy;
            copy = window.copiedModel;
            if (copy != null) {
              window.copiedModel = copy.deepCopy();
              return this.model.get("child_els").add(copy);
            } else {
              return alert("Something went wrong.....");
            }
          }
        });
        this.bindDrop();
        return this;
      };

      layout.prototype.appendChild = function(child, opts) {
        var $el, builderChildren, draggable, view;
        $el = this.$el.children(".children");
        if ($el.length === 0) {
          $el = $el.find(".children").first();
        }
        if (child['layout-item'] === true) {
          $el.addClass("selected-element");
        }
        view = child.get("view") || "draggableElement";
        draggable = $(new views[view]({
          model: child,
          index: window.currIndex,
          parent: this.$el
        }).render().el).addClass("builder-child");
        if (child.get("inFlow") === false) {
          draggable.hide();
        }
        if ((opts != null) && (opts.at == null)) {
          $el.append(draggable);
        } else {
          builderChildren = $el.children(".builder-element");
          if (builderChildren.eq(opts.at).length) {
            builderChildren.eq(opts.at).before(draggable);
          } else {
            $el.append(draggable);
          }
        }
        if (allSections.at(currIndex).get("builder") != null) {
          return allSections.at(currIndex).get("builder").removeExtraPlaceholders();
        }
      };

      layout.prototype.bindDrop = function() {
        var that;
        that = this;
        return this.$el.droppable({
          greedy: true,
          tolerance: 'pointer',
          accept: '.builder-element, .outside-draggables li, .property',
          over: function(e) {
            if ($(document.body).hasClass("active-modal")) {
              return false;
            }
            return $(e.target).addClass("over");
          },
          out: function(e) {
            return $(e.target).removeClass("over").parents().removeClass("over");
          },
          drop: function(e, ui) {
            var builder, draggingModel, model, sect_interface, section;
            $(e.target).removeClass("over").parents().removeClass("over");
            if ($(document.body).hasClass("active-modal")) {
              return false;
            }
            draggingModel = window.currentDraggingModel;
            if (typeof draggingModel === "undefined" || (draggingModel == null)) {
              return false;
            } else if (draggingModel === that.model) {
              return false;
            }
            if (!$.isArray(draggingModel) && draggingModel.get("inFlow") === false) {
              draggingModel.set("inFlow", true);
              return;
            }
            sect_interface = allSections.at(that.index || currIndex);
            section = sect_interface.get("currentSection");
            builder = sect_interface.get("builder");
            model = that.model;
            if (draggingModel.collection !== model.get("child_els")) {
              if (model.blend(draggingModel) === true) {
                $(ui.helper).remove();
                ui.draggable.data('dropped', true);
                delete window.currentDraggingModel;
                window.currentDraggingModel = null;
              }
            }
            e.stopPropagation();
            e.stopImmediatePropagation();
            return true;
          }
        });
      };

      layout.prototype.afterRender = function() {
        if (this.model.get("child_els").length > 0) {
          return this.$el.children(".placeholder").hide();
        }
      };

      layout.prototype.unbindLayout = function() {
        var layout_items, self, temp;
        layout_items = this.model.get("child_els");
        self = this;
        temp = [];
        _.each(layout_items.models, function(item) {
          var children;
          if (item.layoutItem === true) {
            temp.push(item);
          }
          children = item.get("child_els");
          return _.each(children.models, function(child) {
            return self.model.blend(child);
          });
        });
        return _.each(temp, function(dest) {
          return dest.destroy();
        });
      };

      layout.prototype.barLayout = function(sidebar, content) {
        var elChildren, first, model, rest, self;
        self = this;
        model = this.model;
        this.model.set("title", "Bar Layout");
        sidebar = new window.models.Element(sidebar);
        content = new window.models.Element(content);
        elChildren = self.model.get("child_els");
        first = elChildren.at(0);
        rest = elChildren.slice(1);
        sidebar.layoutItem = true;
        content.layoutItem = true;
        sidebar.blend(first);
        content.blend(rest);
        if (content.view === "RightBar") {
          model.blend(content);
          return model.blend(sidebar);
        } else {
          model.blend(sidebar);
          return model.blend(content);
        }
      };

      layout.prototype.formPresetLayout = function(layout) {
        if (layout == null) {
          return false;
        }
        this.unbindLayout();
        return this.layouts[layout](this);
      };

      layout.prototype.layouts = {
        "right-bar": function(self) {
          return self.barLayout({
            view: 'RightBar',
            type: "Dynamic Layout",
            title: 'Right Sidebar'
          }, {
            view: 'LeftContent',
            type: "Dynamic Layout",
            title: 'Left Content'
          });
        },
        "left-bar": function(self) {
          return self.barLayout({
            view: 'LeftBar',
            type: "Dynamic Layout",
            title: 'Left Sidebar'
          }, {
            view: 'RightContent',
            type: "Dynamic Layout",
            title: 'Right Content'
          });
        },
        "header-left-bar": function(self) {
          var layout;
          layout = new models.Element({
            layout: true,
            type: 'Dynamic Layout',
            view: "DynamicLayout",
            title: 'Header'
          });
          layout.layoutItem = true;
          self.barLayout({
            view: 'LeftBar',
            type: "Dynamic Layout",
            title: 'Left Sidebar'
          }, {
            view: 'RightContent',
            type: "Dynamic Layout",
            title: 'Right Content'
          });
          return self.model.blend(layout, 0);
        },
        "header-right-bar": function(self) {
          var layout;
          layout = new models.Element({
            layout: true,
            type: 'Dynamic Layout',
            view: "DynamicLayout",
            title: 'Header'
          });
          layout.layoutItem = true;
          self.barLayout({
            view: 'RightBar',
            type: "Dynamic Layout",
            title: 'Right Sidebar'
          }, {
            view: 'LeftContent',
            type: "Dynamic Layout",
            title: 'Left Content Sidebar'
          });
          return self.model.blend(layout, 0);
        },
        "header-split": function(self) {
          var half, layout;
          layout = new models.Element({
            layout: true,
            type: 'Dynamic Layout',
            view: "DynamicLayout",
            title: 'Header'
          });
          layout.layoutItem = true;
          half = {
            view: 'HalfContent',
            type: "Dynamic Layout",
            title: 'Half Content'
          };
          self.barLayout(half, half);
          return self.model.blend(layout, 0);
        }
      };

      return layout;

    })(window.views.draggableElement);
    /* Inherited view events are triggered first - so if an indentical event binder is
        applied to a descendant, we can use event.stopPropagation() in order to stop the 
        higher level event from firing.
    */

    window.views['BuilderWrapper'] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref2 = _Class.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      _Class.prototype.controls = null;

      _Class.prototype.contextMenu = $("#placeholder-context").html();

      _Class.prototype.className = 'builder-scaffold';

      _Class.prototype.template = $("#builder-wrap").html();

      _Class.prototype.initialize = function() {
        var self;
        _Class.__super__.initialize.apply(this, arguments);
        self = this;
        _.bindAll(this, "afterRender");
        return this.model.on({
          "render": function() {
            return self.render(true);
          }
        });
      };

      _Class.prototype.bindResize = function() {};

      _Class.prototype.appendChild = function() {
        _Class.__super__.appendChild.apply(this, arguments);
        return this.$el.children(".placeholder").remove();
      };

      _Class.prototype.bindDrag = function() {};

      _Class.prototype.afterRender = function() {
        var that;
        that = this;
        return this.$el.selectable({
          filter: '.builder-element:not(.builder-scaffold)',
          tolerance: 'touch',
          cancel: ".config-menu-wrap, input, .title-setter, textarea, .no-drag, .context-menu",
          stop: function(e) {
            if (e.shiftKey === true) {
              return that.blankLayout();
            }
          },
          selecting: function(e, ui) {
            return $(ui.selecting).trigger("select");
          },
          unselecting: function(e, ui) {
            var $item;
            if (e.shiftKey === true) {
              return;
            }
            $item = $(ui.unselecting);
            return $item.trigger("deselect");
          }
        });
      };

      return _Class;

    })(window.views.layout);
    views["table"] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref3 = _Class.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      _Class.prototype.tagName = 'table';

      _Class.prototype.className = 'builder-element column six';

      _Class.prototype.template = $("#table-layout").html();

      _Class.prototype.initialize = function() {
        var self;
        _Class.__super__.initialize.apply(this, arguments);
        self = this;
        return this.model.get("child_els").on("add", function(model, collection, options) {
          if (model.get("type") !== "Property") {
            collection.remove(model);
            return self.model.collection.add(model);
          } else {
            model.set("view", "TableCell");
            console.log(self.$el.find(".dummy"));
            return self.$el.find(".dummy").first().append(self.dummyData());
          }
        });
      };

      _Class.prototype.dummyData = function() {
        var cell_template, col, cols, dummy, row, rows, _i, _j;
        cols = this.model.get("child_els").length;
        rows = 5;
        cell_template = "<td><%= word %></td>";
        dummy = "";
        for (row = _i = 0; 0 <= rows ? _i < rows : _i > rows; row = 0 <= rows ? ++_i : --_i) {
          if (row > 0) {
            dummy += "<tr>";
          }
          for (col = _j = 0; 0 <= cols ? _j < cols : _j > cols; col = 0 <= cols ? ++_j : --_j) {
            dummy += _.template(cell_template, {
              word: randomDict()
            });
          }
          if (row > 0) {
            dummy += "</tr>";
          }
        }
        return dummy;
      };

      return _Class;

    })(views["layout"]);
    window.views["DynamicLayout"] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref4 = _Class.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      _Class.prototype.configTemplate = $("#dynamic-layout-setup").html();

      _Class.prototype.template = $("#dynamic-layout").html();

      return _Class;

    })(window.views["layout"]);
    window.views["dynamicContainer"] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref5 = _Class.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      _Class.prototype.template = $("#dynamic-container").html();

      _Class.prototype.initialize = function() {
        _.bindAll(this, "afterRender");
        return _Class.__super__.initialize.apply(this, arguments);
      };

      _Class.prototype.afterRender = function() {};

      return _Class;

    })(window.views["layout"]);
    window.views["tabItem"] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref6 = _Class.__super__.constructor.apply(this, arguments);
        return _ref6;
      }

      _Class.prototype.events = {
        "keyup h3:first-child": function(e) {
          var $t;
          $t = $(e.currentTarget);
          return this.model.set("title", $t.text());
        },
        "click": "showTabContent"
      };

      _Class.prototype.tabOffset = function() {
        var $el, column_types, len, num_per_row;
        len = this.model.collection.length;
        $el = this.$el;
        num_per_row = 0;
        column_types = ["two", "three", "four", "five", "six"];
        _.each(column_types, function(num, i) {
          if ($el.closest(".tab-layout").hasClass("column " + num)) {
            return num_per_row = i + 2;
          }
        });
        return 10 + 50 * (len / num_per_row);
      };

      _Class.prototype.initialize = function() {
        var self;
        _Class.__super__.initialize.apply(this, arguments);
        self = this;
        console.log("making new tab item");
        _.bindAll(this, "afterRender", "showTabContent");
        return this.model.get("child_els").on({
          "remove": this.showTabContent
        });
      };

      _Class.prototype.appendChild = function(model) {
        _Class.__super__.appendChild.apply(this, arguments);
        return this.$el.children("h3").first().trigger("click");
      };

      _Class.prototype.afterRender = function() {
        return this.$el.css("display", "inline-block !important").children("h3").first().attr("contentEditable", true).addClass("no-drag").trigger("click");
      };

      _Class.prototype.showTabContent = function() {
        var $el, offset, wrap_height;
        console.log("showTabContent");
        $el = this.$el;
        offset = this.tabOffset();
        console.log(offset);
        $el.children(".children").css({
          "top": 20 + offset + "px"
        });
        $el.addClass("active-tab").siblings().removeClass("active-tab");
        wrap_height = $el.height() + $el.children(".children").height();
        console.log(wrap_height);
        $el.closest(".tab-layout").css("height", wrap_height + offset + 12 + "px");
        console.log("done", $el.height() + $el.children(".children").height());
        return this.$el.children(".config-menu-wrap").css({
          "top": (offset - 10) + "px",
          "right": "26px"
        });
      };

      return _Class;

    })(views["draggableElement"]);
    window.views["tabs"] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref7 = _Class.__super__.constructor.apply(this, arguments);
        return _ref7;
      }

      _Class.prototype.template = $("#tab-layout").html();

      _Class.prototype.itemName = 'tabItem';

      _Class.prototype.tagName = 'div class="builder-element tab-layout column six"';

      _Class.prototype.initialize = function() {
        var self;
        this.model.set("type", "Tab Layout", {
          silent: true
        });
        _.bindAll(this, "afterRender");
        self = this;
        this.listenTo(this.model.get("child_els"), {
          "remove": function(m, c, o) {
            if (c.length === 0) {
              return self.$el.children(".placeholder-text").show();
            }
          }
        });
        this.model.get("child_els").on("add", function() {
          return self.$el.children(".placeholder-text").hide();
        });
        return _Class.__super__.initialize.apply(this, arguments);
      };

      _Class.prototype.afterRender = function() {
        var self, tabs;
        cc("tabs after rendering");
        tabs = this.model.get("child_els");
        self = this;
        return _.each(tabs.models, function(tab) {
          return self.formatNewModel(tab);
        });
      };

      _Class.prototype.formatNewModel = function(model, collection, options) {
        model.set("view", "tabItem");
        return this.$el.children(".placeholder-text").hide();
      };

      return _Class;

    })(window.views["layout"]);
    views["ListLayout"] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref8 = _Class.__super__.constructor.apply(this, arguments);
        return _ref8;
      }

      _Class.prototype.initialize = function() {
        _Class.__super__.initialize.apply(this, arguments);
        this.model.set("type", "List Layout");
        return _.bindAll(this, "afterRender");
      };

      _Class.prototype.afterRender = function() {
        return this.$el.addClass("list-layout");
      };

      return _Class;

    })(views['layout']);
    views["RepeatingLayout"] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref9 = _Class.__super__.constructor.apply(this, arguments);
        return _ref9;
      }

      return _Class;

    })(views['layout']);
    views["LayoutItem"] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref10 = _Class.__super__.constructor.apply(this, arguments);
        return _ref10;
      }

      _Class.prototype.bindDrag = function() {};

      _Class.prototype.initialize = function(opts) {
        _Class.__super__.initialize.apply(this, arguments);
        if ((opts != null) && (opts.placeholder != null)) {
          return this.placeholder = opts.placeholder;
        }
      };

      return _Class;

    })(views['layout']);
    views['RightBar'] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref11 = _Class.__super__.constructor.apply(this, arguments);
        return _ref11;
      }

      _Class.prototype.className = 'builder-element sidebar-wrapper fr';

      _Class.prototype.template = "<p class='placeholder'>Right Bar</p>";

      return _Class;

    })(window.views['LayoutItem']);
    views['LeftContent'] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref12 = _Class.__super__.constructor.apply(this, arguments);
        return _ref12;
      }

      _Class.prototype.className = 'builder-element content-wrapper fl';

      _Class.prototype.template = "<p class='placeholder'>Left Content</p>";

      return _Class;

    })(window.views['LayoutItem']);
    views['LeftBar'] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref13 = _Class.__super__.constructor.apply(this, arguments);
        return _ref13;
      }

      _Class.prototype.className = 'builder-element sidebar-wrapper fl';

      _Class.prototype.template = "<p class='placeholder'>Left Bar</p>";

      return _Class;

    })(window.views['LayoutItem']);
    views['RightContent'] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref14 = _Class.__super__.constructor.apply(this, arguments);
        return _ref14;
      }

      _Class.prototype.className = 'builder-element content-wrapper fr';

      _Class.prototype.template = "<p class='placeholder'>Right Content</p>";

      return _Class;

    })(window.views['LayoutItem']);
    return views['HalfContent'] = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref15 = _Class.__super__.constructor.apply(this, arguments);
        return _ref15;
      }

      _Class.prototype.className = 'builder-element half-content fl';

      _Class.prototype.template = "<p class='placeholder'>Half Content</p>";

      return _Class;

    })(window.views['LayoutItem']);
  });

  $(document).ready(function() {
    window.views.ElementOrganizer = Backbone.View.extend({
      initialize: function() {
        var that;
        this.controller = this.options.controller;
        this.wrapper = $(".control-section").eq(this.controller.index);
        this.$el = this.wrapper.find(".organize-elements");
        this.collection = this.options.collection;
        /* Render the list, then apply the drag and drop, and sortable functions.*/

        _.bindAll(this, "append", "render", "bindListeners");
        that = this;
        this.$el.sortable({
          axis: 'y',
          tolerance: 'touch',
          connectWith: 'ul',
          handle: '.sort-element',
          items: '> li.property',
          cancel: ".out-of-flow",
          start: function(e, ui) {
            that.oldIndex = ui.item.index() - 1;
            return that.collection.at(that.oldIndex).trigger("sorting");
          },
          stop: function(e, ui) {
            that.collection.reorder($(ui.item).index() - 1, that.oldIndex, null, {
              opname: "Switch"
            });
            return ui.item.removeClass("moving-sort");
          }
        });
        this.bindListeners();
        this.on("bindListeners", this.bindListeners, this);
        return this;
      },
      bindListeners: function() {
        var that;
        this.stopListening();
        that = this;
        return this.listenTo(this.collection, {
          "add": function(model, collection, options) {
            cc(model);
            cc(collection);
            cc(options);
            if (!((options.organizer != null) && options.organizer.render === false)) {
              return that.append(model, options);
            }
          },
          "remove": function() {
            if (that.collection.length === 0) {
              return $("<li/>").addClass("placeholder").text("No content here.").appendTo(that.$el);
            }
          }
        });
      },
      render: function(e) {
        var $el, index, that;
        $el = this.$el;
        $el.children().not(".list-header, .placeholder").remove();
        that = this;
        index = window.currIndex;
        if (this.collection.length === 0 && this.$(".placeholder").length === 0) {
          $("<li/>").addClass("placeholder").text("No content here.").appendTo(this.$el);
        }
        _.each(this.collection.models, function(el) {
          return that.append(el, {
            index: index,
            outOfFlow: false
          });
        });
        return this;
      },
      append: function(element, options) {
        var itemView, opts;
        this.$el.find(".placeholder").remove();
        if ((options != null) && (options.at != null)) {
          return this.appendAt(element, options);
        } else {
          opts = this.options;
          opts.model = element;
          $.extend(opts, options);
          itemView = new views.SortableElementItem(opts);
          return this.$el.append(itemView.render().el);
        }
      },
      appendAt: function(element, opts) {
        var itemView, pos;
        pos = opts.at + 1;
        cc(pos);
        cc(this.collection.length);
        opts.model = element;
        itemView = new views.SortableElementItem(opts).render().el;
        if (pos >= this.collection.length) {
          return this.$el.append(itemView);
        } else if (pos === 1) {
          return this.$el.children(".list-header").after(itemView);
        } else {
          return this.$el.children().eq(pos).before(itemView);
        }
      },
      events: {
        "click .hide-sidebar": function(e) {
          this.$el.closest(".accessories").toggleClass("hidden-sidebar");
          this.$el.closest(".section-builder-wrap").last().toggleClass("no-sidebar");
          return $(e.currentTarget).toggleClass("flipped");
        }
      }
    });
    return window.views.SortableElementItem = Backbone.View.extend({
      tagName: 'li',
      className: 'property',
      template: $("#element-sortable-item").html(),
      initialize: function() {
        var that;
        that = this;
        this.listenTo(this.model, {
          "render": this.render,
          "remove": function(model, collection, opts) {
            if (!((opts.organizer != null) && opts.organizer.itemRender === false)) {
              return that.remove();
            }
          },
          "change:title": function(model) {
            return that.$el.children(".element-title").first().text(model.get("title"));
          },
          "change:inFlow": function(model, coll, opts) {
            if (model.get("inFlow") === false) {
              return that.$el.addClass("out-of-flow");
            } else {
              return that.$el.removeClass("out-of-flow");
            }
          }
        });
        return this.listenTo(this.model.get("child_els"), {
          "add": function(model, collection, opts) {
            if (!((opts.organizer != null) && opts.organizer.itemRender === false)) {
              return that.append(model, opts);
            }
          },
          'reset': this.render
        });
      },
      render: function() {
        var $el, childList, self, that;
        self = this;
        $el = this.$el;
        $el.html(_.template(this.template, this.model.toJSON()));
        $el.draggable({
          cancel: '.sort-element, .activate-element, .destroy-element',
          revert: 'invalid',
          helper: 'clone',
          start: function(e, ui) {
            var children, clone;
            if (self.model.get("type") === "Property" && self.model.get("inFlow") === true) {
              clone = self.model.clone();
              clone.collection = null;
              children = clone.get("child_els").clone();
              children.reset();
              clone.set("child_els", children, {
                no_history: true
              });
              return window.currentDraggingModel = clone;
            } else {
              return window.currentDraggingModel = self.model;
            }
          }
        });
        that = this;
        if (this.model.get("inFlow") === false) {
          this.$el.addClass("out-of-flow");
        } else {
          $el.removeClass("out-of-flow");
        }
        _.each(this.model.get("child_els").models, function(el) {
          return that.append(el);
        });
        childList = $el.children(".child-list");
        childList.sortable({
          items: '> li',
          axis: 'y',
          containment: 'parent',
          start: function(e, ui) {
            return that.origIndex = $(ui.item).index();
          },
          stop: function(e, ui) {
            return that.model.get("child_els").reorder($(ui.item).index(), that.origIndex);
          }
        });
        return this;
      },
      append: function(child, opts) {
        var $el, childList, elementItem;
        $el = this.$el;
        if ((opts != null) && (opts.at != null)) {
          this.appendAt(child, opts);
          return this;
        }
        if (opts == null) {
          opts = {};
        }
        childList = $el.children(".child-list");
        elementItem = new views.SortableElementItem({
          model: child,
          index: this.options.index
        }).render().el;
        if (child.get("inFlow") === false) {
          opts.outOfFlow = true;
          $el.addClass("out-of-flow");
          $("<div />").addClass("activate-element").text("m").prependTo($el);
          $("<div />").addClass("destroy-element").text("g").prependTo($el);
        }
        return childList.append(elementItem);
      },
      appendAt: function(child, opts) {
        var $el, itemView, pos, self;
        self = this;
        if ($.isArray(child)) {
          return _.each(child, function(model) {
            return self.appendAt(model);
          });
        } else {
          pos = opts.at;
          opts.model = child;
          $el = this.$el.children(".child-list");
          itemView = new views.SortableElementItem(opts).render().el;
          if ((this.model.get("child_els") != null) && pos >= this.model.get("child_els").length - 1) {
            return $el.append(itemView);
          } else if (pos === 0) {
            return $el.prepend(itemView);
          } else {
            $el.children().eq(pos - 1).after(itemView);
            return $el.children().eq(pos).before(itemView);
          }
        }
      },
      events: {
        "mousedown .sort-element": function(e) {
          return this.model.trigger("dragging");
        },
        "mouseup .sort-element": function(e) {
          return this.model.trigger("dropped");
        },
        "click": function(e) {
          if (this.$el.hasClass("out-of-flow")) {
            this.model.set("inFlow", true, {
              e: e,
              opname: 'Flow In'
            });
          }
          return e.stopPropagation();
        },
        "click .destroy-element": function(e) {
          this.model.destroy();
          return e.stopPropagation();
        },
        "mouseover": function(e) {
          this.model.trigger("link-feedback");
          return e.stopPropagation();
        },
        "mouseout": function(e) {
          if (!this.$el.hasClass("moving-sort")) {
            this.model.trigger("end-feedback");
          }
          return e.stopPropagation();
        }
      }
    });
  });

  $(function() {
    var Workspace, app;
    Workspace = Backbone.Router.extend({
      routes: {
        "/page": "page"
      },
      page: function() {
        return cc("hello");
      }
    });
    Backbone.history.start();
    window.app = app = new Workspace();
    return app.navigate("page/1", true);
  });

  $(function() {
    var toolbelt, _ref;
    toolbelt = window.views.toolbelt = {};
    return toolbelt.Actives = (function(_super) {
      __extends(Actives, _super);

      function Actives() {
        _ref = Actives.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Actives.prototype.tagName = 'ul';

      Actives.prototype.initialize = function() {
        var self;
        self = this;
        return this.listenTo(this.model, {
          "change": function(model, opts) {
            return console.log(model);
          },
          "remove": this.remove
        });
      };

      Actives.prototype.render = function() {
        this.quickAttrs();
        return this;
      };

      Actives.prototype.getProps = function(attrs) {
        var prop, properties, property_item;
        property_item = "<li data-attr='<%=prop%>'><%=prop.clean() %>: <%= value %></li>";
        properties = "";
        for (prop in attrs) {
          if (this.regard.indexOf(prop) !== -1) {
            properties += _.template(property_item, {
              prop: prop,
              value: this.formatAttributes(attrs[prop])
            });
          }
        }
        properties += "<div class='view-full-config'>View Full Configuration</div>";
        return properties;
      };

      Actives.prototype.regard = ["child_els", "title", "type"];

      Actives.prototype.editables = ["title"];

      Actives.prototype.quickAttrs = function(e) {
        var attrs, properties;
        if (this.$el.hasClass("builder-scaffold")) {
          return false;
        }
        attrs = this.model.attributes;
        properties = this.getProps(attrs);
        return this.$el.html(properties);
      };

      Actives.prototype.formatAttributes = function(data) {
        var items;
        if (typeof data === "string") {
          return "<span contentEditable>" + data + "</span>";
        } else if ($.isArray(data)) {
          items = "";
          if (data.length === 0) {
            return "None";
          }
          _.each(data, function(item) {
            return items += "<span style='color: red'>" + item + "</span>";
          });
          return items;
        } else {
          return this.formatObject(data.models);
        }
      };

      Actives.prototype.formatObject = function(obj) {
        var items, self;
        if (obj == null) {
          return "";
        }
        self = this;
        items = "<ul class='hidden'>";
        if (obj.length === 0) {
          return "None";
        }
        _.each(obj, function(model) {
          return items += "<li>" + self.getProps(model.attributes) + "</li>";
        });
        items += "</ul></div>";
        return items;
      };

      Actives.prototype.events = {
        "keyup [data-attr] span": function(e) {
          var $t, attr, val;
          $t = $(e.currentTarget);
          attr = $t.closest("[data-attr]").data("attr");
          val = $t.html();
          this.model.set(attr, val, {
            no_history: true
          });
          return e.stopPropagation();
        },
        "click .view-full-config": function() {
          return this.model.trigger("showConfigModal");
        }
      };

      return Actives;

    })(Backbone.View);
  });

  $(document).ready(function() {
    var ctrlDown, ctrlKey, getSlope;
    window.models = {};
    window.views = {};
    window.collections = {};
    window.globals = {
      setPlaceholders: function(draggable, collection) {
        var after, before;
        draggable.before(before = new views.droppablePlaceholder({
          collection: collection
        }).render()).after(after = new views.droppablePlaceholder({
          collection: collection
        }).render());
        if (before.prev().css("display") === "inline-block") {
          return before.css("height", before.prev().height() + "px");
        }
      }
    };
    String.prototype.parseBool = function() {
      if (this.toLowerCase() === "false") {
        return false;
      } else if (this.toLowerCase() === "true") {
        return true;
      }
      return null;
    };
    String.prototype.dirty = function() {
      return this.toLowerCase().replace(/\s+/g, "");
    };
    getSlope = function(y1, y, x1, x) {
      return (y - y1) / (x - x1);
    };
    window.launchModal = function(content) {
      var modal;
      modal = $("<div />").addClass("modal");
      if ($.isArray(content)) {
        _.each(content, function(item) {
          return modal.append(item);
        });
      } else {
        modal.html(content);
      }
      modal.prepend("<i class='close-modal icon-multiply'></i>");
      $(document.body).addClass("active-modal").append(modal);
      return modal;
    };
    window.launchDraggableModal = function(content, tagname, appendTo, title) {
      var modal;
      title = $("<h2/>").html("<i class='icon icon-move'></i>" + title).addClass("drag-handle");
      modal = $("<" + (tagname || "div") + "/>").html($(content).addClass("hidden")).addClass("draggable-modal");
      title.prependTo(modal);
      modal.draggable({
        revert: 'invalid',
        start: function(e, ui) {
          return ui.helper.addClass("moved");
        },
        snap: '.section-builder-wrap:not(:hidden), .sidebar-controls:not(:hidden), .organize-elements:not(:hidden), .draggable-modal:not(:hidden)',
        cancel: '.close-arrow',
        containment: '.container',
        handle: '.drag-handle'
      });
      modal.delegate(".drag-handle", "click", function() {
        cc("click");
        return $(this).siblings(".close-arrow").trigger("click");
      });
      modal.prependTo(appendTo || document.body);
      modal.append($("<div/>").addClass("close-arrow icon-caret-up icon pointer"));
      return modal;
    };
    $.fn.launchModal = function(content) {
      return this.addClass("modal").prependTo($("body").addClass("active-modal"));
    };
    $.fn.showTooltip = function() {
      var el, tooltip_text;
      tooltip_text = this.data("tooltip");
      $(".tooltip").remove();
      el = $("<div/>").addClass("tooltip").text(tooltip_text);
      return this.append(el);
    };
    $.fn.hideTooltip = function() {
      return $(".tooltip").remove();
    };
    window.validNumber = function(num) {
      return !isNaN(parseInt(num));
    };
    window.cc = function(msg, color) {
      return console.log(msg);
    };
    $(this).delegate(".close-modal", "click", function() {
      $(this).closest(".modal").remove();
      return $("body").removeClass("active-modal");
    });
    $(this).delegate(".modal .confirm", "click", function() {
      $(document.body).removeClass("active-modal");
      return $(this).closest(".modal").remove();
    });
    $(this).delegate("[data-switch-text]", "click", function() {
      var $t, currtext, switchtext;
      $t = $(this);
      switchtext = $t.data("switch-text");
      currtext = $t.text();
      $t.text(switchtext);
      return $t.data("switch-text", currtext);
    });
    $(this).delegate("[data-switch-icon]", "click", function() {
      var $t, curricon, switchicon;
      $t = $(this);
      switchicon = $t.data("switch-icon");
      curricon = $t.attr("class").split(" ");
      _.each(curricon, function(classname) {
        if (classname.indexOf("icon") > -1) {
          curricon = classname;
          return false;
        }
      });
      $t.removeClass(curricon);
      $t.addClass(switchicon);
      return $t.data("switch-icon", curricon);
    });
    $(this).delegate(".close-arrow", "click", function() {
      return $(this).toggleClass("flipped").siblings(":not(.drag-handle)").toggle();
    });
    $(this).delegate("[data-modal] input", "click", function(e) {
      var $t, modal;
      $t = $(this);
      modal = $t.parent().data("modal");
      $(".control-section").eq(currIndex).find(".draggable-modal." + modal).toggle("slide", {
        direction: "left"
      }, 200);
      return e.stopPropagation();
    });
    $(this).delegate("[data-modal]", "click", function(e) {
      var $t, modal;
      $t = $(this);
      modal = $t.data("modal");
      $(".control-section").eq(currIndex).find(".draggable-modal." + modal).toggle("slide", {
        direction: "left"
      }, 200);
      return $t.find("input").prop("checked", !$t.find("input").prop("checked"));
    });
    ctrlDown = false;
    ctrlKey = 17;
    $(this).keydown(function(e) {
      var keyCode;
      keyCode = e.keyCode || e.which;
      if (keyCode === ctrlKey) {
        return ctrlDown = true;
      }
    });
    return $(this).keyup(function(e) {
      var current, keyCode, snaps;
      keyCode = e.keyCode || e.which;
      current = allSections.at(window.currIndex).toJSON().controller;
      if (keyCode === ctrlKey) {
        ctrlDown = false;
      }
      if (ctrlDown === true) {
        if (keyCode === 90) {
          snaps = current.histList;
          snaps.selectLast();
        } else if (keyCode === 83) {
          current.saveSection();
        }
      }
      e.preventDefault();
      e.stopPropagation();
      return false;
    });
  });

  $(window).scroll(function() {});

  window.onbeforeunload = function() {
    var saved;
    saved = true;
    _.each(allSections.models, function(section) {
      return saved = section.saved;
    });
    if (saved === false) {
      return "You have unsaved changes. Are you sure you want to reload/navigate away?";
    } else {
      return null;
    }
  };

}).call(this);
